/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreRestPipeline from "@azure/core-rest-pipeline";

export interface ResourceInfo {
  customDocumentModels: CustomDocumentModelInfo;
}

export interface CustomDocumentModelInfo {
  count: number;
  limit: number;
}

export interface ErrorResponse {
  error: ErrorModel;
}

export interface ErrorModel {
  code: string;
  message: string;
  target?: string;
  details?: ErrorModel[];
  innererror?: ErrorModel;
}

export interface CopyAuthorizationRequest {
  modelId: string;
  description?: string;
  /** Dictionary of <string> */
  tags?: { [propertyName: string]: string };
}

export interface CopyAuthorization {
  targetResourceId: string;
  targetResoruceRegion: string;
  targetModelId: string;
  targetModelLocation: string;
  accessToken: string;
  expirationDateTime: string;
}

export interface BuildModelRequest {
  modelId: string;
  description?: string;
  buildMode: ModelsBuildMode;
  azureBlobSource?: AzureBlobContentSource;
  /** Dictionary of <string> */
  tags?: { [propertyName: string]: string };
}

export interface AzureBlobContentSource {
  containerUrl: string;
  prefix?: string;
}

export interface ComposeModelRequest {
  modelId: string;
  description?: string;
  componentModels: ComponentModelInfo[];
  /** Dictionary of <string> */
  tags?: { [propertyName: string]: string };
}

export interface ComponentModelInfo {
  modelId: string;
}

export interface PageModelsModelSummary {
  value: ModelsModelSummary[];
  nextLink?: string;
}

export interface ModelsModelSummary {
  modelId: string;
  createdDateTime: Date;
  apiVersion?: string;
  /** Dictionary of <string> */
  tags?: { [propertyName: string]: string };
}

export interface ModelsDocTypeInfo {
  description?: string;
  buildMode?: ModelsBuildMode;
  /** Dictionary of <Models.DocumentFieldSchema> */
  fieldSchema: { [propertyName: string]: ModelsDocumentFieldSchema };
  /** Any object */
  fieldConfidence: Record<string, unknown>;
}

export interface ModelsDocumentFieldSchema {
  type: ModelsDocumentFieldType;
  description?: string;
  example?: string;
  items?: ModelsDocumentFieldSchema;
  /** Dictionary of <Models.DocumentFieldSchema> */
  properties?: { [propertyName: string]: ModelsDocumentFieldSchema };
}

export interface ModelsAnalyzeResultsAnalyzeOperationState {
  status: ModelsAnalyzeResultsAnalyzeOperationStatus;
  createdDateTime: Date;
  lastUpdatedDateTime: Date;
  error?: ErrorModel;
  analyzeResult?: ModelsAnalyzeResultsAnalyzeResult;
}

export interface ModelsAnalyzeResultsAnalyzeResult {
  apiVersion: string;
  modelId: string;
  stringIndexType: ModelsStringIndexType;
  content: string;
  pages: ModelsAnalyzeResultsDocumentElementsPage[];
  tables: ModelsAnalyzeResultsDocumentElementsTable[];
  keyValuePairs: ModelsAnalyzeResultsDocumentElementsKeyValuePair[];
  entities: ModelsAnalyzeResultsDocumentElementsEntity[];
  styles: ModelsAnalyzeResultsDocumentElementsStyle[];
  languages: ModelsAnalyzeResultsDocumentElementsLanguage[];
  documents: ModelsAnalyzeResultsDocumentElementsDocument[];
}

export interface ModelsAnalyzeResultsDocumentElementsPage {
  pageNumber: number;
  angle: number;
  width: number;
  height: number;
  unit: ModelsAnalyzeResultsDocumentElementsPageUnit;
  spans: ModelsAnalyzeResultsDocumentElementsSpan[];
  words: ModelsAnalyzeResultsDocumentElementsWord[];
  selectionMarks?: ModelsAnalyzeResultsDocumentElementsSelectionMark[];
  lines: ModelsAnalyzeResultsDocumentElementsLine[];
}

export interface ModelsAnalyzeResultsDocumentElementsSpan {
  offset: number;
  length: number;
}

export interface ModelsAnalyzeResultsDocumentElementsWord {
  content: string;
  span: ModelsAnalyzeResultsDocumentElementsSpan;
  boundingBox?: number[];
  confidence: number;
}

export interface ModelsAnalyzeResultsDocumentElementsSelectionMark {
  state: ModelsAnalyzeResultsDocumentElementsSelectionMarkState;
  span: ModelsAnalyzeResultsDocumentElementsSpan;
  boundingBox?: number[];
  confidence: number;
}

export interface ModelsAnalyzeResultsDocumentElementsLine {
  content: string;
  boundingBox?: number[];
  spans: ModelsAnalyzeResultsDocumentElementsSpan[];
}

export interface ModelsAnalyzeResultsDocumentElementsTable {
  rowCount: number;
  columnCount: number;
  cells: ModelsAnalyzeResultsDocumentElementsTableCell[];
  boundingRegions?: ModelsAnalyzeResultsDocumentElementsBoundingRegion[];
  spans: ModelsAnalyzeResultsDocumentElementsSpan[];
}

export interface ModelsAnalyzeResultsDocumentElementsTableCell {
  kind?: ModelsAnalyzeResultsDocumentElementsTableCellKind;
  rowIndex: number;
  columnIndex: number;
  rowSpan?: number;
  columnSpan?: number;
  content: string;
  boundingRegions?: ModelsAnalyzeResultsDocumentElementsBoundingRegion[];
  spans: ModelsAnalyzeResultsDocumentElementsSpan[];
}

export interface ModelsAnalyzeResultsDocumentElementsBoundingRegion {
  pageNumber: number;
  boundingBox: number[];
}

export interface ModelsAnalyzeResultsDocumentElementsKeyValuePair {
  key: ModelsAnalyzeResultsDocumentElementsKeyValueElement;
  value?: ModelsAnalyzeResultsDocumentElementsKeyValueElement;
  confidence: number;
}

export interface ModelsAnalyzeResultsDocumentElementsKeyValueElement {
  content: string;
  boundingRegions?: ModelsAnalyzeResultsDocumentElementsBoundingRegion[];
  spans: ModelsAnalyzeResultsDocumentElementsSpan[];
}

export interface ModelsAnalyzeResultsDocumentElementsEntity {
  category: string;
  subCategory?: string;
  content: string;
  boundingRegions?: ModelsAnalyzeResultsDocumentElementsBoundingRegion[];
  spans: ModelsAnalyzeResultsDocumentElementsSpan[];
  confidence: number;
}

export interface ModelsAnalyzeResultsDocumentElementsStyle {
  isHandwritten?: boolean;
  spans: ModelsAnalyzeResultsDocumentElementsSpan[];
  confidence: number;
}

export interface ModelsAnalyzeResultsDocumentElementsLanguage {
  languageCode: string;
  spans: ModelsAnalyzeResultsDocumentElementsSpan[];
  confidence: number;
}

export interface ModelsAnalyzeResultsDocumentElementsDocument {
  docType: string;
  boundingRegions?: ModelsAnalyzeResultsDocumentElementsBoundingRegion[];
  spans: ModelsAnalyzeResultsDocumentElementsSpan[];
  /** Dictionary of <components·1jq6pnz·schemas·models-analyzeresults-documentelements-document·properties·fields·additionalproperties> */
  fields: {
    [propertyName: string]: Components1Jq6PnzSchemasModelsAnalyzeresultsDocumentelementsDocumentPropertiesFieldsAdditionalproperties;
  };
  confidence: number;
}

export interface Components1Jq6PnzSchemasModelsAnalyzeresultsDocumentelementsDocumentPropertiesFieldsAdditionalproperties {}

export interface ModelsAnalyzeResultsDocumentElementsStringField {
  type: "string";
  valueString?: string;
  content: string;
  boundingRegions?: ModelsAnalyzeResultsDocumentElementsBoundingRegion[];
  spans: ModelsAnalyzeResultsDocumentElementsSpan[];
  confidence: number;
}

export interface ModelsAnalyzeResultsDocumentElementsDateField {
  type: "date";
  valueDate?: Date;
  content: string;
  boundingRegions?: ModelsAnalyzeResultsDocumentElementsBoundingRegion[];
  spans: ModelsAnalyzeResultsDocumentElementsSpan[];
  confidence: number;
}

export interface ModelsAnalyzeResultsDocumentElementsTimeField {
  type: "time";
  /**
   * This value should be an ISO-8601 formatted string representing time. E.g. "HH:MM:SS" or "HH:MM:SS.mm".
   */
  valueTime?: string;
  content: string;
  boundingRegions?: ModelsAnalyzeResultsDocumentElementsBoundingRegion[];
  spans: ModelsAnalyzeResultsDocumentElementsSpan[];
  confidence: number;
}

export interface ModelsAnalyzeResultsDocumentElementsPhoneNumberField {
  type: "phoneNumber";
  valuePhoneNumber?: string;
  content: string;
  boundingRegions?: ModelsAnalyzeResultsDocumentElementsBoundingRegion[];
  spans: ModelsAnalyzeResultsDocumentElementsSpan[];
  confidence: number;
}

export interface ModelsAnalyzeResultsDocumentElementsIntegerField {
  type: "integer";
  valueInteger?: "int64";
  content: string;
  boundingRegions?: ModelsAnalyzeResultsDocumentElementsBoundingRegion[];
  spans: ModelsAnalyzeResultsDocumentElementsSpan[];
  confidence: number;
}

export interface ModelsAnalyzeResultsDocumentElementsSelectionMarkField {
  type: "selectionMark";
  valueSelectionMark?: ModelsAnalyzeResultsDocumentElementsSelectionMarkFieldValueSelectionMark;
  content: string;
  boundingRegions?: ModelsAnalyzeResultsDocumentElementsBoundingRegion[];
  spans: ModelsAnalyzeResultsDocumentElementsSpan[];
  confidence: number;
}

export interface ModelsAnalyzeResultsDocumentElementsSignatureField {
  type: "signature";
  valueSignature?: ModelsAnalyzeResultsDocumentElementsSignatureFieldValueSignature;
  content: string;
  boundingRegions?: ModelsAnalyzeResultsDocumentElementsBoundingRegion[];
  spans: ModelsAnalyzeResultsDocumentElementsSpan[];
  confidence: number;
}

export interface ModelsAnalyzeResultsDocumentElementsCountryRegionField {
  type: "countryRegion";
  valueCountryRegion?: string;
  content: string;
  boundingRegions?: ModelsAnalyzeResultsDocumentElementsBoundingRegion[];
  spans: ModelsAnalyzeResultsDocumentElementsSpan[];
  confidence: number;
}

export interface ModelsAnalyzeResultsDocumentElementsCurrencyField {
  type: "currency";
  valueCurrency?: ModelsAnalyzeResultsDocumentElementsCurrencyValue;
  content: string;
  boundingRegions?: ModelsAnalyzeResultsDocumentElementsBoundingRegion[];
  spans: ModelsAnalyzeResultsDocumentElementsSpan[];
  confidence: number;
}

export interface ModelsAnalyzeResultsDocumentElementsCurrencyValue {
  amount: number;
  currencySymbol?: string;
}

export interface ModelsAnalyzeResultsDocumentElementsArrayField {
  type: "array";
  valueArray: ModelsAnalyzeResultsDocumentElementsArrayFieldValueArrayItem[];
  content: string;
  boundingRegions?: ModelsAnalyzeResultsDocumentElementsBoundingRegion[];
  spans: ModelsAnalyzeResultsDocumentElementsSpan[];
  confidence: number;
}

export interface ModelsAnalyzeResultsDocumentElementsArrayFieldValueArrayItem {}

export interface ModelsAnalyzeResultsDocumentElementsObjectField {
  type: "object";
  /** Dictionary of <components·1mheujy·schemas·models-analyzeresults-documentelements-objectfield·properties·valueobject·additionalproperties> */
  valueObject: {
    [propertyName: string]: Components1MheujySchemasModelsAnalyzeresultsDocumentelementsObjectfieldPropertiesValueobjectAdditionalproperties;
  };
  content: string;
  boundingRegions?: ModelsAnalyzeResultsDocumentElementsBoundingRegion[];
  spans: ModelsAnalyzeResultsDocumentElementsSpan[];
  confidence: number;
}

export interface Components1MheujySchemasModelsAnalyzeresultsDocumentelementsObjectfieldPropertiesValueobjectAdditionalproperties {}

export interface PageOperationsOperationInfo {
  value: OperationsOperationInfo[];
  nextLink?: string;
}

export interface OperationsOperationInfo {
  operationId: string;
  status: OperationsOperationStatus;
  percentCompleted?: number;
  createdDateTime: Date;
  lastUpdatedDateTime: Date;
  kind: OperationsOperationKind;
  resourceLocation: string;
  apiVersion?: string;
  /** Dictionary of <string> */
  tags?: { [propertyName: string]: string };
}

export type ModelsModelInfo = ModelsModelSummary & {
  /** Dictionary of <Models.DocTypeInfo> */
  docTypes?: { [propertyName: string]: ModelsDocTypeInfo };
};

export type OperationsGetOperationResponse = OperationsOperationInfo & {
  error?: ErrorModel;
  result?: ModelsModelInfo;
};

/** Defines headers for FormRecognizer_buildModel operation. */
export interface FormRecognizerBuildModelHeaders {
  operationLocation?: string;
}

/** Defines headers for FormRecognizer_composeModel operation. */
export interface FormRecognizerComposeModelHeaders {
  operationLocation?: string;
}

/** Defines headers for Models_copyModelTo operation. */
export interface ModelsCopyModelToHeaders {
  operationLocation?: string;
}

/** Defines headers for Models_analyze operation. */
export interface ModelsAnalyzeHeaders {
  operationLocation?: string;
}

/** Known values of {@link ModelsBuildMode} that the service accepts. */
export enum KnownModelsBuildMode {
  Template = "template",
  Neural = "neural"
}

/**
 * Defines values for ModelsBuildMode. \
 * {@link KnownModelsBuildMode} can be used interchangeably with ModelsBuildMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **template** \
 * **neural**
 */
export type ModelsBuildMode = string;

/** Known values of {@link Enum1} that the service accepts. */
export enum KnownEnum1 {
  TextElements = "textElements",
  UnicodeCodePoint = "unicodeCodePoint",
  Utf16CodeUnit = "utf16CodeUnit"
}

/**
 * Defines values for Enum1. \
 * {@link KnownEnum1} can be used interchangeably with Enum1,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **textElements** \
 * **unicodeCodePoint** \
 * **utf16CodeUnit**
 */
export type Enum1 = string;

/** Known values of {@link ModelsDocumentFieldType} that the service accepts. */
export enum KnownModelsDocumentFieldType {
  String = "string",
  Date = "date",
  Time = "time",
  PhoneNumber = "phoneNumber",
  Number = "number",
  Integer = "integer",
  SelectionMark = "selectionMark",
  CountryRegion = "countryRegion",
  Signature = "signature",
  Array = "array",
  Object = "object",
  Currency = "currency"
}

/**
 * Defines values for ModelsDocumentFieldType. \
 * {@link KnownModelsDocumentFieldType} can be used interchangeably with ModelsDocumentFieldType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **string** \
 * **date** \
 * **time** \
 * **phoneNumber** \
 * **number** \
 * **integer** \
 * **selectionMark** \
 * **countryRegion** \
 * **signature** \
 * **array** \
 * **object** \
 * **currency**
 */
export type ModelsDocumentFieldType = string;

/** Known values of {@link ModelsAnalyzeResultsAnalyzeOperationStatus} that the service accepts. */
export enum KnownModelsAnalyzeResultsAnalyzeOperationStatus {
  NotStarted = "notStarted",
  Running = "running",
  Failed = "failed",
  Succeeded = "succeeded"
}

/**
 * Defines values for ModelsAnalyzeResultsAnalyzeOperationStatus. \
 * {@link KnownModelsAnalyzeResultsAnalyzeOperationStatus} can be used interchangeably with ModelsAnalyzeResultsAnalyzeOperationStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **notStarted** \
 * **running** \
 * **failed** \
 * **succeeded**
 */
export type ModelsAnalyzeResultsAnalyzeOperationStatus = string;

/** Known values of {@link ModelsStringIndexType} that the service accepts. */
export enum KnownModelsStringIndexType {
  TextElements = "textElements",
  UnicodeCodePoint = "unicodeCodePoint",
  Utf16CodeUnit = "utf16CodeUnit"
}

/**
 * Defines values for ModelsStringIndexType. \
 * {@link KnownModelsStringIndexType} can be used interchangeably with ModelsStringIndexType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **textElements** \
 * **unicodeCodePoint** \
 * **utf16CodeUnit**
 */
export type ModelsStringIndexType = string;

/** Known values of {@link ModelsAnalyzeResultsDocumentElementsPageUnit} that the service accepts. */
export enum KnownModelsAnalyzeResultsDocumentElementsPageUnit {
  Pixel = "pixel",
  Inch = "inch"
}

/**
 * Defines values for ModelsAnalyzeResultsDocumentElementsPageUnit. \
 * {@link KnownModelsAnalyzeResultsDocumentElementsPageUnit} can be used interchangeably with ModelsAnalyzeResultsDocumentElementsPageUnit,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **pixel** \
 * **inch**
 */
export type ModelsAnalyzeResultsDocumentElementsPageUnit = string;

/** Known values of {@link ModelsAnalyzeResultsDocumentElementsSelectionMarkState} that the service accepts. */
export enum KnownModelsAnalyzeResultsDocumentElementsSelectionMarkState {
  Selected = "selected",
  Unselected = "unselected"
}

/**
 * Defines values for ModelsAnalyzeResultsDocumentElementsSelectionMarkState. \
 * {@link KnownModelsAnalyzeResultsDocumentElementsSelectionMarkState} can be used interchangeably with ModelsAnalyzeResultsDocumentElementsSelectionMarkState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **selected** \
 * **unselected**
 */
export type ModelsAnalyzeResultsDocumentElementsSelectionMarkState = string;

/** Known values of {@link ModelsAnalyzeResultsDocumentElementsTableCellKind} that the service accepts. */
export enum KnownModelsAnalyzeResultsDocumentElementsTableCellKind {
  Content = "content",
  RowHeader = "rowHeader",
  ColumnHeader = "columnHeader",
  StubHead = "stubHead",
  Description = "description"
}

/**
 * Defines values for ModelsAnalyzeResultsDocumentElementsTableCellKind. \
 * {@link KnownModelsAnalyzeResultsDocumentElementsTableCellKind} can be used interchangeably with ModelsAnalyzeResultsDocumentElementsTableCellKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **content** \
 * **rowHeader** \
 * **columnHeader** \
 * **stubHead** \
 * **description**
 */
export type ModelsAnalyzeResultsDocumentElementsTableCellKind = string;

/** Known values of {@link ModelsAnalyzeResultsDocumentElementsSelectionMarkFieldValueSelectionMark} that the service accepts. */
export enum KnownModelsAnalyzeResultsDocumentElementsSelectionMarkFieldValueSelectionMark {
  Selected = "selected",
  Unselected = "unselected"
}

/**
 * Defines values for ModelsAnalyzeResultsDocumentElementsSelectionMarkFieldValueSelectionMark. \
 * {@link KnownModelsAnalyzeResultsDocumentElementsSelectionMarkFieldValueSelectionMark} can be used interchangeably with ModelsAnalyzeResultsDocumentElementsSelectionMarkFieldValueSelectionMark,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **selected** \
 * **unselected**
 */
export type ModelsAnalyzeResultsDocumentElementsSelectionMarkFieldValueSelectionMark = string;

/** Known values of {@link ModelsAnalyzeResultsDocumentElementsSignatureFieldValueSignature} that the service accepts. */
export enum KnownModelsAnalyzeResultsDocumentElementsSignatureFieldValueSignature {
  Signed = "signed",
  Unsigned = "unsigned"
}

/**
 * Defines values for ModelsAnalyzeResultsDocumentElementsSignatureFieldValueSignature. \
 * {@link KnownModelsAnalyzeResultsDocumentElementsSignatureFieldValueSignature} can be used interchangeably with ModelsAnalyzeResultsDocumentElementsSignatureFieldValueSignature,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **signed** \
 * **unsigned**
 */
export type ModelsAnalyzeResultsDocumentElementsSignatureFieldValueSignature = string;

/** Known values of {@link OperationsOperationStatus} that the service accepts. */
export enum KnownOperationsOperationStatus {
  NotStarted = "notStarted",
  Running = "running",
  Failed = "failed",
  Succeeded = "succeeded",
  Canceled = "canceled"
}

/**
 * Defines values for OperationsOperationStatus. \
 * {@link KnownOperationsOperationStatus} can be used interchangeably with OperationsOperationStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **notStarted** \
 * **running** \
 * **failed** \
 * **succeeded** \
 * **canceled**
 */
export type OperationsOperationStatus = string;

/** Known values of {@link OperationsOperationKind} that the service accepts. */
export enum KnownOperationsOperationKind {
  DocumentModelBuild = "documentModelBuild",
  DocumentModelCompose = "documentModelCompose",
  DocumentModelCopyTo = "documentModelCopyTo"
}

/**
 * Defines values for OperationsOperationKind. \
 * {@link KnownOperationsOperationKind} can be used interchangeably with OperationsOperationKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **documentModelBuild** \
 * **documentModelCompose** \
 * **documentModelCopyTo**
 */
export type OperationsOperationKind = string;

/** Optional parameters. */
export interface FormRecognizerGetInfoOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getInfo operation. */
export type FormRecognizerGetInfoResponse = ResourceInfo;

/** Optional parameters. */
export interface FormRecognizerGetCopyAuthorizationOptionalParams
  extends coreClient.OperationOptions {
  body?: CopyAuthorizationRequest;
}

/** Contains response data for the getCopyAuthorization operation. */
export type FormRecognizerGetCopyAuthorizationResponse = CopyAuthorization;

/** Optional parameters. */
export interface FormRecognizerBuildModelOptionalParams
  extends coreClient.OperationOptions {
  body?: BuildModelRequest;
}

/** Contains response data for the buildModel operation. */
export type FormRecognizerBuildModelResponse = FormRecognizerBuildModelHeaders;

/** Optional parameters. */
export interface FormRecognizerComposeModelOptionalParams
  extends coreClient.OperationOptions {
  body?: ComposeModelRequest;
}

/** Contains response data for the composeModel operation. */
export type FormRecognizerComposeModelResponse = FormRecognizerComposeModelHeaders;

/** Optional parameters. */
export interface ModelsListOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type ModelsListResponse = PageModelsModelSummary;

/** Optional parameters. */
export interface ModelsCopyModelToOptionalParams
  extends coreClient.OperationOptions {
  body?: CopyAuthorization;
}

/** Contains response data for the copyModelTo operation. */
export type ModelsCopyModelToResponse = ModelsCopyModelToHeaders;

/** Optional parameters. */
export interface ModelsAnalyzeOptionalParams
  extends coreClient.OperationOptions {
  data?: coreRestPipeline.RequestBodyType;
  pages?: string;
  locale?: string;
  stringIndexType?: Enum1;
}

/** Contains response data for the analyze operation. */
export type ModelsAnalyzeResponse = ModelsAnalyzeHeaders;

/** Optional parameters. */
export interface ModelGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ModelGetResponse = ModelsModelInfo;

/** Optional parameters. */
export interface ModelDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the delete operation. */
export type ModelDeleteResponse = Record<string, unknown>;

/** Optional parameters. */
export interface AnalyzeResultsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type AnalyzeResultsGetResponse = ModelsAnalyzeResultsAnalyzeOperationState;

/** Optional parameters. */
export interface OperationsGetOperationsPageOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getOperationsPage operation. */
export type OperationsGetOperationsPageResponse = PageOperationsOperationInfo;

/** Optional parameters. */
export interface OperationsGetOperationOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getOperation operation. */
export type OperationsGetOperationOperationResponse = OperationsGetOperationResponse;

/** Optional parameters. */
export interface FormRecognizerClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
