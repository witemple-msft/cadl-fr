/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { FormRecognizer } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { FormRecognizerClient } from "../formRecognizerClient";
import {
  FormRecognizerGetInfoOptionalParams,
  FormRecognizerGetInfoResponse,
  FormRecognizerGetCopyAuthorizationOptionalParams,
  FormRecognizerGetCopyAuthorizationResponse,
  FormRecognizerBuildModelOptionalParams,
  FormRecognizerBuildModelResponse,
  FormRecognizerComposeModelOptionalParams,
  FormRecognizerComposeModelResponse
} from "../models";

/** Class containing FormRecognizer operations. */
export class FormRecognizerImpl implements FormRecognizer {
  private readonly client: FormRecognizerClient;

  /**
   * Initialize a new instance of the class FormRecognizer class.
   * @param client Reference to the service client
   */
  constructor(client: FormRecognizerClient) {
    this.client = client;
  }

  /** @param options The options parameters. */
  getInfo(
    options?: FormRecognizerGetInfoOptionalParams
  ): Promise<FormRecognizerGetInfoResponse> {
    return this.client.sendOperationRequest({ options }, getInfoOperationSpec);
  }

  /** @param options The options parameters. */
  getCopyAuthorization(
    options?: FormRecognizerGetCopyAuthorizationOptionalParams
  ): Promise<FormRecognizerGetCopyAuthorizationResponse> {
    return this.client.sendOperationRequest(
      { options },
      getCopyAuthorizationOperationSpec
    );
  }

  /** @param options The options parameters. */
  buildModel(
    options?: FormRecognizerBuildModelOptionalParams
  ): Promise<FormRecognizerBuildModelResponse> {
    return this.client.sendOperationRequest(
      { options },
      buildModelOperationSpec
    );
  }

  /** @param options The options parameters. */
  composeModel(
    options?: FormRecognizerComposeModelOptionalParams
  ): Promise<FormRecognizerComposeModelResponse> {
    return this.client.sendOperationRequest(
      { options },
      composeModelOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getInfoOperationSpec: coreClient.OperationSpec = {
  path: "/formrecognizer/info",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceInfo
    },
    400: {
      bodyMapper: Mappers.ErrorResponse
    },
    403: {
      bodyMapper: Mappers.ErrorResponse
    },
    404: {
      bodyMapper: Mappers.ErrorResponse
    },
    429: {
      bodyMapper: Mappers.ErrorResponse
    },
    500: {
      bodyMapper: Mappers.ErrorResponse
    },
    502: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getCopyAuthorizationOperationSpec: coreClient.OperationSpec = {
  path: "/formrecognizer/documentModels:authorizeCopy",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CopyAuthorization
    },
    400: {
      bodyMapper: Mappers.ErrorResponse
    },
    403: {
      bodyMapper: Mappers.ErrorResponse
    },
    404: {
      bodyMapper: Mappers.ErrorResponse
    },
    429: {
      bodyMapper: Mappers.ErrorResponse
    },
    500: {
      bodyMapper: Mappers.ErrorResponse
    },
    502: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const buildModelOperationSpec: coreClient.OperationSpec = {
  path: "/formrecognizer/documentModels:build",
  httpMethod: "POST",
  responses: {
    202: {
      headersMapper: Mappers.FormRecognizerBuildModelHeaders
    },
    400: {
      bodyMapper: Mappers.ErrorResponse
    },
    403: {
      bodyMapper: Mappers.ErrorResponse
    },
    404: {
      bodyMapper: Mappers.ErrorResponse
    },
    429: {
      bodyMapper: Mappers.ErrorResponse
    },
    500: {
      bodyMapper: Mappers.ErrorResponse
    },
    502: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const composeModelOperationSpec: coreClient.OperationSpec = {
  path: "/formrecognizer/documentModels:compose",
  httpMethod: "POST",
  responses: {
    202: {
      headersMapper: Mappers.FormRecognizerComposeModelHeaders
    },
    400: {
      bodyMapper: Mappers.ErrorResponse
    },
    403: {
      bodyMapper: Mappers.ErrorResponse
    },
    404: {
      bodyMapper: Mappers.ErrorResponse
    },
    429: {
      bodyMapper: Mappers.ErrorResponse
    },
    500: {
      bodyMapper: Mappers.ErrorResponse
    },
    502: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
