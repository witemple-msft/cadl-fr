/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { Operations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { FormRecognizerClient } from "../formRecognizerClient";
import {
  OperationsGetOperationsPageOptionalParams,
  OperationsGetOperationsPageResponse,
  OperationsGetOperationOptionalParams,
  OperationsGetOperationOperationResponse
} from "../models";

/** Class containing Operations operations. */
export class OperationsImpl implements Operations {
  private readonly client: FormRecognizerClient;

  /**
   * Initialize a new instance of the class Operations class.
   * @param client Reference to the service client
   */
  constructor(client: FormRecognizerClient) {
    this.client = client;
  }

  /** @param options The options parameters. */
  getOperationsPage(
    options?: OperationsGetOperationsPageOptionalParams
  ): Promise<OperationsGetOperationsPageResponse> {
    return this.client.sendOperationRequest(
      { options },
      getOperationsPageOperationSpec
    );
  }

  /**
   * @param operationId
   * @param options The options parameters.
   */
  getOperation(
    operationId: string,
    options?: OperationsGetOperationOptionalParams
  ): Promise<OperationsGetOperationOperationResponse> {
    return this.client.sendOperationRequest(
      { operationId, options },
      getOperationOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationsPageOperationSpec: coreClient.OperationSpec = {
  path: "/formrecognizer/operations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PageOperationsOperationInfo
    },
    400: {
      bodyMapper: Mappers.ErrorResponse
    },
    403: {
      bodyMapper: Mappers.ErrorResponse
    },
    404: {
      bodyMapper: Mappers.ErrorResponse
    },
    429: {
      bodyMapper: Mappers.ErrorResponse
    },
    500: {
      bodyMapper: Mappers.ErrorResponse
    },
    502: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationOperationSpec: coreClient.OperationSpec = {
  path: "/formrecognizer/operations/{operationId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OperationsGetOperationResponse
    },
    400: {
      bodyMapper: Mappers.ErrorResponse
    },
    403: {
      bodyMapper: Mappers.ErrorResponse
    },
    404: {
      bodyMapper: Mappers.ErrorResponse
    },
    429: {
      bodyMapper: Mappers.ErrorResponse
    },
    500: {
      bodyMapper: Mappers.ErrorResponse
    },
    502: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.operationId],
  headerParameters: [Parameters.accept],
  serializer
};
