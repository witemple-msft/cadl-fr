/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { Models } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { FormRecognizerClient } from "../formRecognizerClient";
import {
  ModelsListOptionalParams,
  ModelsListResponse,
  ModelsCopyModelToOptionalParams,
  ModelsCopyModelToResponse,
  ModelsAnalyzeOptionalParams,
  ModelsAnalyzeResponse
} from "../models";

/** Class containing Models operations. */
export class ModelsImpl implements Models {
  private readonly client: FormRecognizerClient;

  /**
   * Initialize a new instance of the class Models class.
   * @param client Reference to the service client
   */
  constructor(client: FormRecognizerClient) {
    this.client = client;
  }

  /** @param options The options parameters. */
  list(options?: ModelsListOptionalParams): Promise<ModelsListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }

  /**
   * @param modelId
   * @param options The options parameters.
   */
  copyModelTo(
    modelId: string,
    options?: ModelsCopyModelToOptionalParams
  ): Promise<ModelsCopyModelToResponse> {
    return this.client.sendOperationRequest(
      { modelId, options },
      copyModelToOperationSpec
    );
  }

  /**
   * @param modelId
   * @param options The options parameters.
   */
  analyze(
    modelId: string,
    options?: ModelsAnalyzeOptionalParams
  ): Promise<ModelsAnalyzeResponse> {
    return this.client.sendOperationRequest(
      { modelId, options },
      analyzeOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path: "/formrecognizer/documentModels",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PageModelsModelSummary
    },
    400: {
      bodyMapper: Mappers.ErrorResponse
    },
    403: {
      bodyMapper: Mappers.ErrorResponse
    },
    404: {
      bodyMapper: Mappers.ErrorResponse
    },
    429: {
      bodyMapper: Mappers.ErrorResponse
    },
    500: {
      bodyMapper: Mappers.ErrorResponse
    },
    502: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const copyModelToOperationSpec: coreClient.OperationSpec = {
  path: "/formrecognizer/documentModels/{modelId}:copyTo",
  httpMethod: "POST",
  responses: {
    202: {
      headersMapper: Mappers.ModelsCopyModelToHeaders
    },
    400: {
      bodyMapper: Mappers.ErrorResponse
    },
    403: {
      bodyMapper: Mappers.ErrorResponse
    },
    404: {
      bodyMapper: Mappers.ErrorResponse
    },
    429: {
      bodyMapper: Mappers.ErrorResponse
    },
    500: {
      bodyMapper: Mappers.ErrorResponse
    },
    502: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.modelId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const analyzeOperationSpec: coreClient.OperationSpec = {
  path: "/formrecognizer/documentModels/{modelId}:analyze",
  httpMethod: "POST",
  responses: {
    202: {
      headersMapper: Mappers.ModelsAnalyzeHeaders
    },
    400: {
      bodyMapper: Mappers.ErrorResponse
    },
    403: {
      bodyMapper: Mappers.ErrorResponse
    },
    404: {
      bodyMapper: Mappers.ErrorResponse
    },
    429: {
      bodyMapper: Mappers.ErrorResponse
    },
    500: {
      bodyMapper: Mappers.ErrorResponse
    },
    502: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.data,
  queryParameters: [
    Parameters.apiVersion,
    Parameters.pages,
    Parameters.locale,
    Parameters.stringIndexType
  ],
  urlParameters: [Parameters.$host, Parameters.modelId],
  headerParameters: [Parameters.contentType1, Parameters.accept1],
  mediaType: "binary",
  serializer
};
