// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace FormRecognizerClient.Models
{
    /// <summary> The ModelsAnalyzeResultsAnalyzeOperationStatus. </summary>
    public readonly partial struct ModelsAnalyzeResultsAnalyzeOperationStatus : IEquatable<ModelsAnalyzeResultsAnalyzeOperationStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ModelsAnalyzeResultsAnalyzeOperationStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ModelsAnalyzeResultsAnalyzeOperationStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NotStartedValue = "notStarted";
        private const string RunningValue = "running";
        private const string FailedValue = "failed";
        private const string SucceededValue = "succeeded";

        /// <summary> notStarted. </summary>
        public static ModelsAnalyzeResultsAnalyzeOperationStatus NotStarted { get; } = new ModelsAnalyzeResultsAnalyzeOperationStatus(NotStartedValue);
        /// <summary> running. </summary>
        public static ModelsAnalyzeResultsAnalyzeOperationStatus Running { get; } = new ModelsAnalyzeResultsAnalyzeOperationStatus(RunningValue);
        /// <summary> failed. </summary>
        public static ModelsAnalyzeResultsAnalyzeOperationStatus Failed { get; } = new ModelsAnalyzeResultsAnalyzeOperationStatus(FailedValue);
        /// <summary> succeeded. </summary>
        public static ModelsAnalyzeResultsAnalyzeOperationStatus Succeeded { get; } = new ModelsAnalyzeResultsAnalyzeOperationStatus(SucceededValue);
        /// <summary> Determines if two <see cref="ModelsAnalyzeResultsAnalyzeOperationStatus"/> values are the same. </summary>
        public static bool operator ==(ModelsAnalyzeResultsAnalyzeOperationStatus left, ModelsAnalyzeResultsAnalyzeOperationStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ModelsAnalyzeResultsAnalyzeOperationStatus"/> values are not the same. </summary>
        public static bool operator !=(ModelsAnalyzeResultsAnalyzeOperationStatus left, ModelsAnalyzeResultsAnalyzeOperationStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ModelsAnalyzeResultsAnalyzeOperationStatus"/>. </summary>
        public static implicit operator ModelsAnalyzeResultsAnalyzeOperationStatus(string value) => new ModelsAnalyzeResultsAnalyzeOperationStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ModelsAnalyzeResultsAnalyzeOperationStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ModelsAnalyzeResultsAnalyzeOperationStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
