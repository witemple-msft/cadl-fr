// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace FormRecognizerClient.Models
{
    public partial class ModelsAnalyzeResultsAnalyzeResult
    {
        internal static ModelsAnalyzeResultsAnalyzeResult DeserializeModelsAnalyzeResultsAnalyzeResult(JsonElement element)
        {
            string apiVersion = default;
            string modelId = default;
            ModelsStringIndexType stringIndexType = default;
            string content = default;
            IReadOnlyList<ModelsAnalyzeResultsDocumentElementsPage> pages = default;
            IReadOnlyList<ModelsAnalyzeResultsDocumentElementsTable> tables = default;
            IReadOnlyList<ModelsAnalyzeResultsDocumentElementsKeyValuePair> keyValuePairs = default;
            IReadOnlyList<ModelsAnalyzeResultsDocumentElementsEntity> entities = default;
            IReadOnlyList<ModelsAnalyzeResultsDocumentElementsStyle> styles = default;
            IReadOnlyList<ModelsAnalyzeResultsDocumentElementsLanguage> languages = default;
            IReadOnlyList<ModelsAnalyzeResultsDocumentElementsDocument> documents = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("apiVersion"))
                {
                    apiVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("modelId"))
                {
                    modelId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("stringIndexType"))
                {
                    stringIndexType = new ModelsStringIndexType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("content"))
                {
                    content = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("pages"))
                {
                    List<ModelsAnalyzeResultsDocumentElementsPage> array = new List<ModelsAnalyzeResultsDocumentElementsPage>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ModelsAnalyzeResultsDocumentElementsPage.DeserializeModelsAnalyzeResultsDocumentElementsPage(item));
                    }
                    pages = array;
                    continue;
                }
                if (property.NameEquals("tables"))
                {
                    List<ModelsAnalyzeResultsDocumentElementsTable> array = new List<ModelsAnalyzeResultsDocumentElementsTable>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ModelsAnalyzeResultsDocumentElementsTable.DeserializeModelsAnalyzeResultsDocumentElementsTable(item));
                    }
                    tables = array;
                    continue;
                }
                if (property.NameEquals("keyValuePairs"))
                {
                    List<ModelsAnalyzeResultsDocumentElementsKeyValuePair> array = new List<ModelsAnalyzeResultsDocumentElementsKeyValuePair>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ModelsAnalyzeResultsDocumentElementsKeyValuePair.DeserializeModelsAnalyzeResultsDocumentElementsKeyValuePair(item));
                    }
                    keyValuePairs = array;
                    continue;
                }
                if (property.NameEquals("entities"))
                {
                    List<ModelsAnalyzeResultsDocumentElementsEntity> array = new List<ModelsAnalyzeResultsDocumentElementsEntity>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ModelsAnalyzeResultsDocumentElementsEntity.DeserializeModelsAnalyzeResultsDocumentElementsEntity(item));
                    }
                    entities = array;
                    continue;
                }
                if (property.NameEquals("styles"))
                {
                    List<ModelsAnalyzeResultsDocumentElementsStyle> array = new List<ModelsAnalyzeResultsDocumentElementsStyle>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ModelsAnalyzeResultsDocumentElementsStyle.DeserializeModelsAnalyzeResultsDocumentElementsStyle(item));
                    }
                    styles = array;
                    continue;
                }
                if (property.NameEquals("languages"))
                {
                    List<ModelsAnalyzeResultsDocumentElementsLanguage> array = new List<ModelsAnalyzeResultsDocumentElementsLanguage>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ModelsAnalyzeResultsDocumentElementsLanguage.DeserializeModelsAnalyzeResultsDocumentElementsLanguage(item));
                    }
                    languages = array;
                    continue;
                }
                if (property.NameEquals("documents"))
                {
                    List<ModelsAnalyzeResultsDocumentElementsDocument> array = new List<ModelsAnalyzeResultsDocumentElementsDocument>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ModelsAnalyzeResultsDocumentElementsDocument.DeserializeModelsAnalyzeResultsDocumentElementsDocument(item));
                    }
                    documents = array;
                    continue;
                }
            }
            return new ModelsAnalyzeResultsAnalyzeResult(apiVersion, modelId, stringIndexType, content, pages, tables, keyValuePairs, entities, styles, languages, documents);
        }
    }
}
