// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace FormRecognizerClient.Models
{
    /// <summary> The ModelsAnalyzeResultsDocumentElementsTableCellKind. </summary>
    public readonly partial struct ModelsAnalyzeResultsDocumentElementsTableCellKind : IEquatable<ModelsAnalyzeResultsDocumentElementsTableCellKind>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ModelsAnalyzeResultsDocumentElementsTableCellKind"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ModelsAnalyzeResultsDocumentElementsTableCellKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ContentValue = "content";
        private const string RowHeaderValue = "rowHeader";
        private const string ColumnHeaderValue = "columnHeader";
        private const string StubHeadValue = "stubHead";
        private const string DescriptionValue = "description";

        /// <summary> content. </summary>
        public static ModelsAnalyzeResultsDocumentElementsTableCellKind Content { get; } = new ModelsAnalyzeResultsDocumentElementsTableCellKind(ContentValue);
        /// <summary> rowHeader. </summary>
        public static ModelsAnalyzeResultsDocumentElementsTableCellKind RowHeader { get; } = new ModelsAnalyzeResultsDocumentElementsTableCellKind(RowHeaderValue);
        /// <summary> columnHeader. </summary>
        public static ModelsAnalyzeResultsDocumentElementsTableCellKind ColumnHeader { get; } = new ModelsAnalyzeResultsDocumentElementsTableCellKind(ColumnHeaderValue);
        /// <summary> stubHead. </summary>
        public static ModelsAnalyzeResultsDocumentElementsTableCellKind StubHead { get; } = new ModelsAnalyzeResultsDocumentElementsTableCellKind(StubHeadValue);
        /// <summary> description. </summary>
        public static ModelsAnalyzeResultsDocumentElementsTableCellKind Description { get; } = new ModelsAnalyzeResultsDocumentElementsTableCellKind(DescriptionValue);
        /// <summary> Determines if two <see cref="ModelsAnalyzeResultsDocumentElementsTableCellKind"/> values are the same. </summary>
        public static bool operator ==(ModelsAnalyzeResultsDocumentElementsTableCellKind left, ModelsAnalyzeResultsDocumentElementsTableCellKind right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ModelsAnalyzeResultsDocumentElementsTableCellKind"/> values are not the same. </summary>
        public static bool operator !=(ModelsAnalyzeResultsDocumentElementsTableCellKind left, ModelsAnalyzeResultsDocumentElementsTableCellKind right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ModelsAnalyzeResultsDocumentElementsTableCellKind"/>. </summary>
        public static implicit operator ModelsAnalyzeResultsDocumentElementsTableCellKind(string value) => new ModelsAnalyzeResultsDocumentElementsTableCellKind(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ModelsAnalyzeResultsDocumentElementsTableCellKind other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ModelsAnalyzeResultsDocumentElementsTableCellKind other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
