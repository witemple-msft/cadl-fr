// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace FormRecognizerClient.Models
{
    /// <summary> The ModelsAnalyzeResultsDocumentElementsPage. </summary>
    public partial class ModelsAnalyzeResultsDocumentElementsPage
    {
        /// <summary> Initializes a new instance of ModelsAnalyzeResultsDocumentElementsPage. </summary>
        /// <param name="pageNumber"></param>
        /// <param name="angle"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="unit"></param>
        /// <param name="spans"></param>
        /// <param name="words"></param>
        /// <param name="lines"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="spans"/>, <paramref name="words"/> or <paramref name="lines"/> is null. </exception>
        internal ModelsAnalyzeResultsDocumentElementsPage(int pageNumber, double angle, double width, double height, ModelsAnalyzeResultsDocumentElementsPageUnit unit, IEnumerable<ModelsAnalyzeResultsDocumentElementsSpan> spans, IEnumerable<ModelsAnalyzeResultsDocumentElementsWord> words, IEnumerable<ModelsAnalyzeResultsDocumentElementsLine> lines)
        {
            if (spans == null)
            {
                throw new ArgumentNullException(nameof(spans));
            }
            if (words == null)
            {
                throw new ArgumentNullException(nameof(words));
            }
            if (lines == null)
            {
                throw new ArgumentNullException(nameof(lines));
            }

            PageNumber = pageNumber;
            Angle = angle;
            Width = width;
            Height = height;
            Unit = unit;
            Spans = spans.ToList();
            Words = words.ToList();
            SelectionMarks = new ChangeTrackingList<ModelsAnalyzeResultsDocumentElementsSelectionMark>();
            Lines = lines.ToList();
        }

        /// <summary> Initializes a new instance of ModelsAnalyzeResultsDocumentElementsPage. </summary>
        /// <param name="pageNumber"></param>
        /// <param name="angle"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="unit"></param>
        /// <param name="spans"></param>
        /// <param name="words"></param>
        /// <param name="selectionMarks"></param>
        /// <param name="lines"></param>
        internal ModelsAnalyzeResultsDocumentElementsPage(int pageNumber, double angle, double width, double height, ModelsAnalyzeResultsDocumentElementsPageUnit unit, IReadOnlyList<ModelsAnalyzeResultsDocumentElementsSpan> spans, IReadOnlyList<ModelsAnalyzeResultsDocumentElementsWord> words, IReadOnlyList<ModelsAnalyzeResultsDocumentElementsSelectionMark> selectionMarks, IReadOnlyList<ModelsAnalyzeResultsDocumentElementsLine> lines)
        {
            PageNumber = pageNumber;
            Angle = angle;
            Width = width;
            Height = height;
            Unit = unit;
            Spans = spans;
            Words = words;
            SelectionMarks = selectionMarks;
            Lines = lines;
        }

        /// <summary> Gets the page number. </summary>
        public int PageNumber { get; }
        /// <summary> Gets the angle. </summary>
        public double Angle { get; }
        /// <summary> Gets the width. </summary>
        public double Width { get; }
        /// <summary> Gets the height. </summary>
        public double Height { get; }
        /// <summary> Gets the unit. </summary>
        public ModelsAnalyzeResultsDocumentElementsPageUnit Unit { get; }
        /// <summary> Gets the spans. </summary>
        public IReadOnlyList<ModelsAnalyzeResultsDocumentElementsSpan> Spans { get; }
        /// <summary> Gets the words. </summary>
        public IReadOnlyList<ModelsAnalyzeResultsDocumentElementsWord> Words { get; }
        /// <summary> Gets the selection marks. </summary>
        public IReadOnlyList<ModelsAnalyzeResultsDocumentElementsSelectionMark> SelectionMarks { get; }
        /// <summary> Gets the lines. </summary>
        public IReadOnlyList<ModelsAnalyzeResultsDocumentElementsLine> Lines { get; }
    }
}
