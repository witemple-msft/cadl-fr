# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import msrest.serialization


class AzureBlobContentSource(msrest.serialization.Model):
    """AzureBlobContentSource.

    All required parameters must be populated in order to send to Azure.

    :ivar container_url: Required.
    :vartype container_url: str
    :ivar prefix:
    :vartype prefix: str
    """

    _validation = {
        'container_url': {'required': True},
    }

    _attribute_map = {
        'container_url': {'key': 'containerUrl', 'type': 'str'},
        'prefix': {'key': 'prefix', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword container_url: Required.
        :paramtype container_url: str
        :keyword prefix:
        :paramtype prefix: str
        """
        super(AzureBlobContentSource, self).__init__(**kwargs)
        self.container_url = kwargs['container_url']
        self.prefix = kwargs.get('prefix', None)


class BuildModelRequest(msrest.serialization.Model):
    """BuildModelRequest.

    All required parameters must be populated in order to send to Azure.

    :ivar model_id: Required.
    :vartype model_id: str
    :ivar description:
    :vartype description: str
    :ivar build_mode: Required. Possible values include: "template", "neural".
    :vartype build_mode: str or ~form_recognizer_client.models.ModelsBuildMode
    :ivar azure_blob_source:
    :vartype azure_blob_source: ~form_recognizer_client.models.AzureBlobContentSource
    :ivar tags: A set of tags. Dictionary of :code:`<string>`.
    :vartype tags: dict[str, str]
    """

    _validation = {
        'model_id': {'required': True},
        'build_mode': {'required': True},
    }

    _attribute_map = {
        'model_id': {'key': 'modelId', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'build_mode': {'key': 'buildMode', 'type': 'str'},
        'azure_blob_source': {'key': 'azureBlobSource', 'type': 'AzureBlobContentSource'},
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword model_id: Required.
        :paramtype model_id: str
        :keyword description:
        :paramtype description: str
        :keyword build_mode: Required. Possible values include: "template", "neural".
        :paramtype build_mode: str or ~form_recognizer_client.models.ModelsBuildMode
        :keyword azure_blob_source:
        :paramtype azure_blob_source: ~form_recognizer_client.models.AzureBlobContentSource
        :keyword tags: A set of tags. Dictionary of :code:`<string>`.
        :paramtype tags: dict[str, str]
        """
        super(BuildModelRequest, self).__init__(**kwargs)
        self.model_id = kwargs['model_id']
        self.description = kwargs.get('description', None)
        self.build_mode = kwargs['build_mode']
        self.azure_blob_source = kwargs.get('azure_blob_source', None)
        self.tags = kwargs.get('tags', None)


class ComponentModelInfo(msrest.serialization.Model):
    """ComponentModelInfo.

    All required parameters must be populated in order to send to Azure.

    :ivar model_id: Required.
    :vartype model_id: str
    """

    _validation = {
        'model_id': {'required': True},
    }

    _attribute_map = {
        'model_id': {'key': 'modelId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword model_id: Required.
        :paramtype model_id: str
        """
        super(ComponentModelInfo, self).__init__(**kwargs)
        self.model_id = kwargs['model_id']


class ComposeModelRequest(msrest.serialization.Model):
    """ComposeModelRequest.

    All required parameters must be populated in order to send to Azure.

    :ivar model_id: Required.
    :vartype model_id: str
    :ivar description:
    :vartype description: str
    :ivar component_models: Required.
    :vartype component_models: list[~form_recognizer_client.models.ComponentModelInfo]
    :ivar tags: A set of tags. Dictionary of :code:`<string>`.
    :vartype tags: dict[str, str]
    """

    _validation = {
        'model_id': {'required': True},
        'component_models': {'required': True},
    }

    _attribute_map = {
        'model_id': {'key': 'modelId', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'component_models': {'key': 'componentModels', 'type': '[ComponentModelInfo]'},
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword model_id: Required.
        :paramtype model_id: str
        :keyword description:
        :paramtype description: str
        :keyword component_models: Required.
        :paramtype component_models: list[~form_recognizer_client.models.ComponentModelInfo]
        :keyword tags: A set of tags. Dictionary of :code:`<string>`.
        :paramtype tags: dict[str, str]
        """
        super(ComposeModelRequest, self).__init__(**kwargs)
        self.model_id = kwargs['model_id']
        self.description = kwargs.get('description', None)
        self.component_models = kwargs['component_models']
        self.tags = kwargs.get('tags', None)


class CopyAuthorization(msrest.serialization.Model):
    """CopyAuthorization.

    All required parameters must be populated in order to send to Azure.

    :ivar target_resource_id: Required.
    :vartype target_resource_id: str
    :ivar target_resoruce_region: Required.
    :vartype target_resoruce_region: str
    :ivar target_model_id: Required.
    :vartype target_model_id: str
    :ivar target_model_location: Required.
    :vartype target_model_location: str
    :ivar access_token: Required.
    :vartype access_token: str
    :ivar expiration_date_time: Required.
    :vartype expiration_date_time: str
    """

    _validation = {
        'target_resource_id': {'required': True},
        'target_resoruce_region': {'required': True},
        'target_model_id': {'required': True},
        'target_model_location': {'required': True},
        'access_token': {'required': True},
        'expiration_date_time': {'required': True},
    }

    _attribute_map = {
        'target_resource_id': {'key': 'targetResourceId', 'type': 'str'},
        'target_resoruce_region': {'key': 'targetResoruceRegion', 'type': 'str'},
        'target_model_id': {'key': 'targetModelId', 'type': 'str'},
        'target_model_location': {'key': 'targetModelLocation', 'type': 'str'},
        'access_token': {'key': 'accessToken', 'type': 'str'},
        'expiration_date_time': {'key': 'expirationDateTime', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword target_resource_id: Required.
        :paramtype target_resource_id: str
        :keyword target_resoruce_region: Required.
        :paramtype target_resoruce_region: str
        :keyword target_model_id: Required.
        :paramtype target_model_id: str
        :keyword target_model_location: Required.
        :paramtype target_model_location: str
        :keyword access_token: Required.
        :paramtype access_token: str
        :keyword expiration_date_time: Required.
        :paramtype expiration_date_time: str
        """
        super(CopyAuthorization, self).__init__(**kwargs)
        self.target_resource_id = kwargs['target_resource_id']
        self.target_resoruce_region = kwargs['target_resoruce_region']
        self.target_model_id = kwargs['target_model_id']
        self.target_model_location = kwargs['target_model_location']
        self.access_token = kwargs['access_token']
        self.expiration_date_time = kwargs['expiration_date_time']


class CopyAuthorizationRequest(msrest.serialization.Model):
    """CopyAuthorizationRequest.

    All required parameters must be populated in order to send to Azure.

    :ivar model_id: Required.
    :vartype model_id: str
    :ivar description:
    :vartype description: str
    :ivar tags: A set of tags. Dictionary of :code:`<string>`.
    :vartype tags: dict[str, str]
    """

    _validation = {
        'model_id': {'required': True},
    }

    _attribute_map = {
        'model_id': {'key': 'modelId', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword model_id: Required.
        :paramtype model_id: str
        :keyword description:
        :paramtype description: str
        :keyword tags: A set of tags. Dictionary of :code:`<string>`.
        :paramtype tags: dict[str, str]
        """
        super(CopyAuthorizationRequest, self).__init__(**kwargs)
        self.model_id = kwargs['model_id']
        self.description = kwargs.get('description', None)
        self.tags = kwargs.get('tags', None)


class CustomDocumentModelInfo(msrest.serialization.Model):
    """CustomDocumentModelInfo.

    All required parameters must be populated in order to send to Azure.

    :ivar count: Required.
    :vartype count: int
    :ivar limit: Required.
    :vartype limit: int
    """

    _validation = {
        'count': {'required': True},
        'limit': {'required': True},
    }

    _attribute_map = {
        'count': {'key': 'count', 'type': 'int'},
        'limit': {'key': 'limit', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword count: Required.
        :paramtype count: int
        :keyword limit: Required.
        :paramtype limit: int
        """
        super(CustomDocumentModelInfo, self).__init__(**kwargs)
        self.count = kwargs['count']
        self.limit = kwargs['limit']


class Error(msrest.serialization.Model):
    """Error.

    All required parameters must be populated in order to send to Azure.

    :ivar code: Required.
    :vartype code: str
    :ivar message: Required.
    :vartype message: str
    :ivar target:
    :vartype target: str
    :ivar details:
    :vartype details: list[~form_recognizer_client.models.Error]
    :ivar innererror:
    :vartype innererror: ~form_recognizer_client.models.Error
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[Error]'},
        'innererror': {'key': 'innererror', 'type': 'Error'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword code: Required.
        :paramtype code: str
        :keyword message: Required.
        :paramtype message: str
        :keyword target:
        :paramtype target: str
        :keyword details:
        :paramtype details: list[~form_recognizer_client.models.Error]
        :keyword innererror:
        :paramtype innererror: ~form_recognizer_client.models.Error
        """
        super(Error, self).__init__(**kwargs)
        self.code = kwargs['code']
        self.message = kwargs['message']
        self.target = kwargs.get('target', None)
        self.details = kwargs.get('details', None)
        self.innererror = kwargs.get('innererror', None)


class ModelsAnalyzeRequest(msrest.serialization.Model):
    """ModelsAnalyzeRequest.

    :ivar url_source:
    :vartype url_source: str
    :ivar base64_content_source:
    :vartype base64_content_source: str
    """

    _attribute_map = {
        'url_source': {'key': 'urlSource', 'type': 'str'},
        'base64_content_source': {'key': 'base64ContentSource', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword url_source:
        :paramtype url_source: str
        :keyword base64_content_source:
        :paramtype base64_content_source: str
        """
        super(ModelsAnalyzeRequest, self).__init__(**kwargs)
        self.url_source = kwargs.get('url_source', None)
        self.base64_content_source = kwargs.get('base64_content_source', None)


class ModelsAnalyzeResultsAnalyzeOperation(msrest.serialization.Model):
    """ModelsAnalyzeResultsAnalyzeOperation.

    All required parameters must be populated in order to send to Azure.

    :ivar status: Required. Possible values include: "notStarted", "running", "failed",
     "succeeded".
    :vartype status: str or
     ~form_recognizer_client.models.ModelsAnalyzeResultsAnalyzeOperationStatus
    :ivar created_date_time: Required.
    :vartype created_date_time: ~datetime.datetime
    :ivar last_updated_date_time: Required.
    :vartype last_updated_date_time: ~datetime.datetime
    :ivar error:
    :vartype error: ~form_recognizer_client.models.Error
    :ivar analyze_result:
    :vartype analyze_result: ~form_recognizer_client.models.ModelsAnalyzeResultsAnalyzeResult
    """

    _validation = {
        'status': {'required': True},
        'created_date_time': {'required': True},
        'last_updated_date_time': {'required': True},
    }

    _attribute_map = {
        'status': {'key': 'status', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_updated_date_time': {'key': 'lastUpdatedDateTime', 'type': 'iso-8601'},
        'error': {'key': 'error', 'type': 'Error'},
        'analyze_result': {'key': 'analyzeResult', 'type': 'ModelsAnalyzeResultsAnalyzeResult'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword status: Required. Possible values include: "notStarted", "running", "failed",
         "succeeded".
        :paramtype status: str or
         ~form_recognizer_client.models.ModelsAnalyzeResultsAnalyzeOperationStatus
        :keyword created_date_time: Required.
        :paramtype created_date_time: ~datetime.datetime
        :keyword last_updated_date_time: Required.
        :paramtype last_updated_date_time: ~datetime.datetime
        :keyword error:
        :paramtype error: ~form_recognizer_client.models.Error
        :keyword analyze_result:
        :paramtype analyze_result: ~form_recognizer_client.models.ModelsAnalyzeResultsAnalyzeResult
        """
        super(ModelsAnalyzeResultsAnalyzeOperation, self).__init__(**kwargs)
        self.status = kwargs['status']
        self.created_date_time = kwargs['created_date_time']
        self.last_updated_date_time = kwargs['last_updated_date_time']
        self.error = kwargs.get('error', None)
        self.analyze_result = kwargs.get('analyze_result', None)


class ModelsAnalyzeResultsAnalyzeResult(msrest.serialization.Model):
    """ModelsAnalyzeResultsAnalyzeResult.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: Required.
    :vartype api_version: str
    :ivar model_id: Required.
    :vartype model_id: str
    :ivar string_index_type: Required. Possible values include: "textElements", "unicodeCodePoint",
     "utf16CodeUnit".
    :vartype string_index_type: str or ~form_recognizer_client.models.ModelsStringIndexType
    :ivar content: Required.
    :vartype content: str
    :ivar pages: Required.
    :vartype pages: list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsPage]
    :ivar tables: Required.
    :vartype tables: list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsTable]
    :ivar key_value_pairs: Required.
    :vartype key_value_pairs:
     list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsKeyValuePair]
    :ivar entities: Required.
    :vartype entities:
     list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsEntity]
    :ivar styles: Required.
    :vartype styles: list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsStyle]
    :ivar languages: Required.
    :vartype languages:
     list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsLanguage]
    :ivar documents: Required.
    :vartype documents:
     list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsDocument]
    """

    _validation = {
        'api_version': {'required': True},
        'model_id': {'required': True},
        'string_index_type': {'required': True},
        'content': {'required': True},
        'pages': {'required': True},
        'tables': {'required': True},
        'key_value_pairs': {'required': True},
        'entities': {'required': True},
        'styles': {'required': True},
        'languages': {'required': True},
        'documents': {'required': True},
    }

    _attribute_map = {
        'api_version': {'key': 'apiVersion', 'type': 'str'},
        'model_id': {'key': 'modelId', 'type': 'str'},
        'string_index_type': {'key': 'stringIndexType', 'type': 'str'},
        'content': {'key': 'content', 'type': 'str'},
        'pages': {'key': 'pages', 'type': '[ModelsAnalyzeResultsDocumentElementsPage]'},
        'tables': {'key': 'tables', 'type': '[ModelsAnalyzeResultsDocumentElementsTable]'},
        'key_value_pairs': {'key': 'keyValuePairs', 'type': '[ModelsAnalyzeResultsDocumentElementsKeyValuePair]'},
        'entities': {'key': 'entities', 'type': '[ModelsAnalyzeResultsDocumentElementsEntity]'},
        'styles': {'key': 'styles', 'type': '[ModelsAnalyzeResultsDocumentElementsStyle]'},
        'languages': {'key': 'languages', 'type': '[ModelsAnalyzeResultsDocumentElementsLanguage]'},
        'documents': {'key': 'documents', 'type': '[ModelsAnalyzeResultsDocumentElementsDocument]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword api_version: Required.
        :paramtype api_version: str
        :keyword model_id: Required.
        :paramtype model_id: str
        :keyword string_index_type: Required. Possible values include: "textElements",
         "unicodeCodePoint", "utf16CodeUnit".
        :paramtype string_index_type: str or ~form_recognizer_client.models.ModelsStringIndexType
        :keyword content: Required.
        :paramtype content: str
        :keyword pages: Required.
        :paramtype pages: list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsPage]
        :keyword tables: Required.
        :paramtype tables:
         list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsTable]
        :keyword key_value_pairs: Required.
        :paramtype key_value_pairs:
         list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsKeyValuePair]
        :keyword entities: Required.
        :paramtype entities:
         list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsEntity]
        :keyword styles: Required.
        :paramtype styles:
         list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsStyle]
        :keyword languages: Required.
        :paramtype languages:
         list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsLanguage]
        :keyword documents: Required.
        :paramtype documents:
         list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsDocument]
        """
        super(ModelsAnalyzeResultsAnalyzeResult, self).__init__(**kwargs)
        self.api_version = kwargs['api_version']
        self.model_id = kwargs['model_id']
        self.string_index_type = kwargs['string_index_type']
        self.content = kwargs['content']
        self.pages = kwargs['pages']
        self.tables = kwargs['tables']
        self.key_value_pairs = kwargs['key_value_pairs']
        self.entities = kwargs['entities']
        self.styles = kwargs['styles']
        self.languages = kwargs['languages']
        self.documents = kwargs['documents']


class ModelsAnalyzeResultsDocumentElementsArrayField(msrest.serialization.Model):
    """ModelsAnalyzeResultsDocumentElementsArrayField.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar type:  Has constant value: "array".
    :vartype type: str
    :ivar value_array: Required.
    :vartype value_array: list[any]
    :ivar content: Required.
    :vartype content: str
    :ivar bounding_regions:
    :vartype bounding_regions:
     list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsBoundingRegion]
    :ivar spans: Required.
    :vartype spans: list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsSpan]
    :ivar confidence: Required.
    :vartype confidence: float
    """

    _validation = {
        'type': {'required': True, 'constant': True},
        'value_array': {'required': True},
        'content': {'required': True},
        'spans': {'required': True},
        'confidence': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'value_array': {'key': 'valueArray', 'type': '[object]'},
        'content': {'key': 'content', 'type': 'str'},
        'bounding_regions': {'key': 'boundingRegions', 'type': '[ModelsAnalyzeResultsDocumentElementsBoundingRegion]'},
        'spans': {'key': 'spans', 'type': '[ModelsAnalyzeResultsDocumentElementsSpan]'},
        'confidence': {'key': 'confidence', 'type': 'float'},
    }

    type = "array"

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value_array: Required.
        :paramtype value_array: list[any]
        :keyword content: Required.
        :paramtype content: str
        :keyword bounding_regions:
        :paramtype bounding_regions:
         list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsBoundingRegion]
        :keyword spans: Required.
        :paramtype spans: list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsSpan]
        :keyword confidence: Required.
        :paramtype confidence: float
        """
        super(ModelsAnalyzeResultsDocumentElementsArrayField, self).__init__(**kwargs)
        self.value_array = kwargs['value_array']
        self.content = kwargs['content']
        self.bounding_regions = kwargs.get('bounding_regions', None)
        self.spans = kwargs['spans']
        self.confidence = kwargs['confidence']


class ModelsAnalyzeResultsDocumentElementsBoundingRegion(msrest.serialization.Model):
    """ModelsAnalyzeResultsDocumentElementsBoundingRegion.

    All required parameters must be populated in order to send to Azure.

    :ivar page_number: Required.
    :vartype page_number: int
    :ivar bounding_box: Required.
    :vartype bounding_box: list[float]
    """

    _validation = {
        'page_number': {'required': True},
        'bounding_box': {'required': True},
    }

    _attribute_map = {
        'page_number': {'key': 'pageNumber', 'type': 'int'},
        'bounding_box': {'key': 'boundingBox', 'type': '[float]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword page_number: Required.
        :paramtype page_number: int
        :keyword bounding_box: Required.
        :paramtype bounding_box: list[float]
        """
        super(ModelsAnalyzeResultsDocumentElementsBoundingRegion, self).__init__(**kwargs)
        self.page_number = kwargs['page_number']
        self.bounding_box = kwargs['bounding_box']


class ModelsAnalyzeResultsDocumentElementsCountryRegionField(msrest.serialization.Model):
    """ModelsAnalyzeResultsDocumentElementsCountryRegionField.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar type:  Has constant value: "countryRegion".
    :vartype type: str
    :ivar value_country_region:
    :vartype value_country_region: str
    :ivar content: Required.
    :vartype content: str
    :ivar bounding_regions:
    :vartype bounding_regions:
     list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsBoundingRegion]
    :ivar spans: Required.
    :vartype spans: list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsSpan]
    :ivar confidence: Required.
    :vartype confidence: float
    """

    _validation = {
        'type': {'required': True, 'constant': True},
        'content': {'required': True},
        'spans': {'required': True},
        'confidence': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'value_country_region': {'key': 'valueCountryRegion', 'type': 'str'},
        'content': {'key': 'content', 'type': 'str'},
        'bounding_regions': {'key': 'boundingRegions', 'type': '[ModelsAnalyzeResultsDocumentElementsBoundingRegion]'},
        'spans': {'key': 'spans', 'type': '[ModelsAnalyzeResultsDocumentElementsSpan]'},
        'confidence': {'key': 'confidence', 'type': 'float'},
    }

    type = "countryRegion"

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value_country_region:
        :paramtype value_country_region: str
        :keyword content: Required.
        :paramtype content: str
        :keyword bounding_regions:
        :paramtype bounding_regions:
         list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsBoundingRegion]
        :keyword spans: Required.
        :paramtype spans: list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsSpan]
        :keyword confidence: Required.
        :paramtype confidence: float
        """
        super(ModelsAnalyzeResultsDocumentElementsCountryRegionField, self).__init__(**kwargs)
        self.value_country_region = kwargs.get('value_country_region', None)
        self.content = kwargs['content']
        self.bounding_regions = kwargs.get('bounding_regions', None)
        self.spans = kwargs['spans']
        self.confidence = kwargs['confidence']


class ModelsAnalyzeResultsDocumentElementsCurrencyField(msrest.serialization.Model):
    """ModelsAnalyzeResultsDocumentElementsCurrencyField.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar type:  Has constant value: "currency".
    :vartype type: str
    :ivar value_currency:
    :vartype value_currency:
     ~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsCurrencyValue
    :ivar content: Required.
    :vartype content: str
    :ivar bounding_regions:
    :vartype bounding_regions:
     list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsBoundingRegion]
    :ivar spans: Required.
    :vartype spans: list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsSpan]
    :ivar confidence: Required.
    :vartype confidence: float
    """

    _validation = {
        'type': {'required': True, 'constant': True},
        'content': {'required': True},
        'spans': {'required': True},
        'confidence': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'value_currency': {'key': 'valueCurrency', 'type': 'ModelsAnalyzeResultsDocumentElementsCurrencyValue'},
        'content': {'key': 'content', 'type': 'str'},
        'bounding_regions': {'key': 'boundingRegions', 'type': '[ModelsAnalyzeResultsDocumentElementsBoundingRegion]'},
        'spans': {'key': 'spans', 'type': '[ModelsAnalyzeResultsDocumentElementsSpan]'},
        'confidence': {'key': 'confidence', 'type': 'float'},
    }

    type = "currency"

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value_currency:
        :paramtype value_currency:
         ~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsCurrencyValue
        :keyword content: Required.
        :paramtype content: str
        :keyword bounding_regions:
        :paramtype bounding_regions:
         list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsBoundingRegion]
        :keyword spans: Required.
        :paramtype spans: list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsSpan]
        :keyword confidence: Required.
        :paramtype confidence: float
        """
        super(ModelsAnalyzeResultsDocumentElementsCurrencyField, self).__init__(**kwargs)
        self.value_currency = kwargs.get('value_currency', None)
        self.content = kwargs['content']
        self.bounding_regions = kwargs.get('bounding_regions', None)
        self.spans = kwargs['spans']
        self.confidence = kwargs['confidence']


class ModelsAnalyzeResultsDocumentElementsCurrencyValue(msrest.serialization.Model):
    """ModelsAnalyzeResultsDocumentElementsCurrencyValue.

    All required parameters must be populated in order to send to Azure.

    :ivar amount: Required.
    :vartype amount: float
    :ivar currency_symbol:
    :vartype currency_symbol: str
    :ivar content: Required.
    :vartype content: str
    :ivar bounding_regions:
    :vartype bounding_regions:
     list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsBoundingRegion]
    :ivar spans: Required.
    :vartype spans: list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsSpan]
    :ivar confidence: Required.
    :vartype confidence: float
    """

    _validation = {
        'amount': {'required': True},
        'content': {'required': True},
        'spans': {'required': True},
        'confidence': {'required': True},
    }

    _attribute_map = {
        'amount': {'key': 'amount', 'type': 'float'},
        'currency_symbol': {'key': 'currencySymbol', 'type': 'str'},
        'content': {'key': 'content', 'type': 'str'},
        'bounding_regions': {'key': 'boundingRegions', 'type': '[ModelsAnalyzeResultsDocumentElementsBoundingRegion]'},
        'spans': {'key': 'spans', 'type': '[ModelsAnalyzeResultsDocumentElementsSpan]'},
        'confidence': {'key': 'confidence', 'type': 'float'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword amount: Required.
        :paramtype amount: float
        :keyword currency_symbol:
        :paramtype currency_symbol: str
        :keyword content: Required.
        :paramtype content: str
        :keyword bounding_regions:
        :paramtype bounding_regions:
         list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsBoundingRegion]
        :keyword spans: Required.
        :paramtype spans: list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsSpan]
        :keyword confidence: Required.
        :paramtype confidence: float
        """
        super(ModelsAnalyzeResultsDocumentElementsCurrencyValue, self).__init__(**kwargs)
        self.amount = kwargs['amount']
        self.currency_symbol = kwargs.get('currency_symbol', None)
        self.content = kwargs['content']
        self.bounding_regions = kwargs.get('bounding_regions', None)
        self.spans = kwargs['spans']
        self.confidence = kwargs['confidence']


class ModelsAnalyzeResultsDocumentElementsDateField(msrest.serialization.Model):
    """ModelsAnalyzeResultsDocumentElementsDateField.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar type:  Has constant value: "date".
    :vartype type: str
    :ivar value_date:
    :vartype value_date: ~datetime.datetime
    :ivar content: Required.
    :vartype content: str
    :ivar bounding_regions:
    :vartype bounding_regions:
     list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsBoundingRegion]
    :ivar spans: Required.
    :vartype spans: list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsSpan]
    :ivar confidence: Required.
    :vartype confidence: float
    """

    _validation = {
        'type': {'required': True, 'constant': True},
        'content': {'required': True},
        'spans': {'required': True},
        'confidence': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'value_date': {'key': 'valueDate', 'type': 'iso-8601'},
        'content': {'key': 'content', 'type': 'str'},
        'bounding_regions': {'key': 'boundingRegions', 'type': '[ModelsAnalyzeResultsDocumentElementsBoundingRegion]'},
        'spans': {'key': 'spans', 'type': '[ModelsAnalyzeResultsDocumentElementsSpan]'},
        'confidence': {'key': 'confidence', 'type': 'float'},
    }

    type = "date"

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value_date:
        :paramtype value_date: ~datetime.datetime
        :keyword content: Required.
        :paramtype content: str
        :keyword bounding_regions:
        :paramtype bounding_regions:
         list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsBoundingRegion]
        :keyword spans: Required.
        :paramtype spans: list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsSpan]
        :keyword confidence: Required.
        :paramtype confidence: float
        """
        super(ModelsAnalyzeResultsDocumentElementsDateField, self).__init__(**kwargs)
        self.value_date = kwargs.get('value_date', None)
        self.content = kwargs['content']
        self.bounding_regions = kwargs.get('bounding_regions', None)
        self.spans = kwargs['spans']
        self.confidence = kwargs['confidence']


class ModelsAnalyzeResultsDocumentElementsDocument(msrest.serialization.Model):
    """ModelsAnalyzeResultsDocumentElementsDocument.

    All required parameters must be populated in order to send to Azure.

    :ivar doc_type: Required.
    :vartype doc_type: str
    :ivar bounding_regions:
    :vartype bounding_regions:
     list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsBoundingRegion]
    :ivar spans: Required.
    :vartype spans: list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsSpan]
    :ivar fields: Required. Dictionary of
     <components·1jq6pnz·schemas·models-analyzeresults-documentelements-document·properties·fields·additionalproperties>.
    :vartype fields: dict[str, any]
    :ivar confidence: Required.
    :vartype confidence: float
    """

    _validation = {
        'doc_type': {'required': True},
        'spans': {'required': True},
        'fields': {'required': True},
        'confidence': {'required': True},
    }

    _attribute_map = {
        'doc_type': {'key': 'docType', 'type': 'str'},
        'bounding_regions': {'key': 'boundingRegions', 'type': '[ModelsAnalyzeResultsDocumentElementsBoundingRegion]'},
        'spans': {'key': 'spans', 'type': '[ModelsAnalyzeResultsDocumentElementsSpan]'},
        'fields': {'key': 'fields', 'type': '{object}'},
        'confidence': {'key': 'confidence', 'type': 'float'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword doc_type: Required.
        :paramtype doc_type: str
        :keyword bounding_regions:
        :paramtype bounding_regions:
         list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsBoundingRegion]
        :keyword spans: Required.
        :paramtype spans: list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsSpan]
        :keyword fields: Required. Dictionary of
         <components·1jq6pnz·schemas·models-analyzeresults-documentelements-document·properties·fields·additionalproperties>.
        :paramtype fields: dict[str, any]
        :keyword confidence: Required.
        :paramtype confidence: float
        """
        super(ModelsAnalyzeResultsDocumentElementsDocument, self).__init__(**kwargs)
        self.doc_type = kwargs['doc_type']
        self.bounding_regions = kwargs.get('bounding_regions', None)
        self.spans = kwargs['spans']
        self.fields = kwargs['fields']
        self.confidence = kwargs['confidence']


class ModelsAnalyzeResultsDocumentElementsEntity(msrest.serialization.Model):
    """ModelsAnalyzeResultsDocumentElementsEntity.

    All required parameters must be populated in order to send to Azure.

    :ivar category: Required.
    :vartype category: str
    :ivar sub_category:
    :vartype sub_category: str
    :ivar content: Required.
    :vartype content: str
    :ivar bounding_regions:
    :vartype bounding_regions:
     list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsBoundingRegion]
    :ivar spans: Required.
    :vartype spans: list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsSpan]
    :ivar confidence: Required.
    :vartype confidence: float
    """

    _validation = {
        'category': {'required': True},
        'content': {'required': True},
        'spans': {'required': True},
        'confidence': {'required': True},
    }

    _attribute_map = {
        'category': {'key': 'category', 'type': 'str'},
        'sub_category': {'key': 'subCategory', 'type': 'str'},
        'content': {'key': 'content', 'type': 'str'},
        'bounding_regions': {'key': 'boundingRegions', 'type': '[ModelsAnalyzeResultsDocumentElementsBoundingRegion]'},
        'spans': {'key': 'spans', 'type': '[ModelsAnalyzeResultsDocumentElementsSpan]'},
        'confidence': {'key': 'confidence', 'type': 'float'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword category: Required.
        :paramtype category: str
        :keyword sub_category:
        :paramtype sub_category: str
        :keyword content: Required.
        :paramtype content: str
        :keyword bounding_regions:
        :paramtype bounding_regions:
         list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsBoundingRegion]
        :keyword spans: Required.
        :paramtype spans: list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsSpan]
        :keyword confidence: Required.
        :paramtype confidence: float
        """
        super(ModelsAnalyzeResultsDocumentElementsEntity, self).__init__(**kwargs)
        self.category = kwargs['category']
        self.sub_category = kwargs.get('sub_category', None)
        self.content = kwargs['content']
        self.bounding_regions = kwargs.get('bounding_regions', None)
        self.spans = kwargs['spans']
        self.confidence = kwargs['confidence']


class ModelsAnalyzeResultsDocumentElementsIntegerField(msrest.serialization.Model):
    """ModelsAnalyzeResultsDocumentElementsIntegerField.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar type:  Has constant value: "integer".
    :vartype type: str
    :ivar value_integer:  The only acceptable values to pass in are None and "int64". The default
     value is None.
    :vartype value_integer: str
    :ivar content: Required.
    :vartype content: str
    :ivar bounding_regions:
    :vartype bounding_regions:
     list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsBoundingRegion]
    :ivar spans: Required.
    :vartype spans: list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsSpan]
    :ivar confidence: Required.
    :vartype confidence: float
    """

    _validation = {
        'type': {'required': True, 'constant': True},
        'content': {'required': True},
        'spans': {'required': True},
        'confidence': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'value_integer': {'key': 'valueInteger', 'type': 'str'},
        'content': {'key': 'content', 'type': 'str'},
        'bounding_regions': {'key': 'boundingRegions', 'type': '[ModelsAnalyzeResultsDocumentElementsBoundingRegion]'},
        'spans': {'key': 'spans', 'type': '[ModelsAnalyzeResultsDocumentElementsSpan]'},
        'confidence': {'key': 'confidence', 'type': 'float'},
    }

    type = "integer"

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value_integer:  The only acceptable values to pass in are None and "int64". The
         default value is None.
        :paramtype value_integer: str
        :keyword content: Required.
        :paramtype content: str
        :keyword bounding_regions:
        :paramtype bounding_regions:
         list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsBoundingRegion]
        :keyword spans: Required.
        :paramtype spans: list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsSpan]
        :keyword confidence: Required.
        :paramtype confidence: float
        """
        super(ModelsAnalyzeResultsDocumentElementsIntegerField, self).__init__(**kwargs)
        self.value_integer = kwargs.get('value_integer', None)
        self.content = kwargs['content']
        self.bounding_regions = kwargs.get('bounding_regions', None)
        self.spans = kwargs['spans']
        self.confidence = kwargs['confidence']


class ModelsAnalyzeResultsDocumentElementsKeyValueElement(msrest.serialization.Model):
    """ModelsAnalyzeResultsDocumentElementsKeyValueElement.

    All required parameters must be populated in order to send to Azure.

    :ivar content: Required.
    :vartype content: str
    :ivar bounding_regions:
    :vartype bounding_regions:
     list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsBoundingRegion]
    :ivar spans: Required.
    :vartype spans: list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsSpan]
    """

    _validation = {
        'content': {'required': True},
        'spans': {'required': True},
    }

    _attribute_map = {
        'content': {'key': 'content', 'type': 'str'},
        'bounding_regions': {'key': 'boundingRegions', 'type': '[ModelsAnalyzeResultsDocumentElementsBoundingRegion]'},
        'spans': {'key': 'spans', 'type': '[ModelsAnalyzeResultsDocumentElementsSpan]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword content: Required.
        :paramtype content: str
        :keyword bounding_regions:
        :paramtype bounding_regions:
         list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsBoundingRegion]
        :keyword spans: Required.
        :paramtype spans: list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsSpan]
        """
        super(ModelsAnalyzeResultsDocumentElementsKeyValueElement, self).__init__(**kwargs)
        self.content = kwargs['content']
        self.bounding_regions = kwargs.get('bounding_regions', None)
        self.spans = kwargs['spans']


class ModelsAnalyzeResultsDocumentElementsKeyValuePair(msrest.serialization.Model):
    """ModelsAnalyzeResultsDocumentElementsKeyValuePair.

    All required parameters must be populated in order to send to Azure.

    :ivar key: Required.
    :vartype key:
     ~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsKeyValueElement
    :ivar value:
    :vartype value:
     ~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsKeyValueElement
    :ivar confidence: Required.
    :vartype confidence: float
    """

    _validation = {
        'key': {'required': True},
        'confidence': {'required': True},
    }

    _attribute_map = {
        'key': {'key': 'key', 'type': 'ModelsAnalyzeResultsDocumentElementsKeyValueElement'},
        'value': {'key': 'value', 'type': 'ModelsAnalyzeResultsDocumentElementsKeyValueElement'},
        'confidence': {'key': 'confidence', 'type': 'float'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword key: Required.
        :paramtype key:
         ~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsKeyValueElement
        :keyword value:
        :paramtype value:
         ~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsKeyValueElement
        :keyword confidence: Required.
        :paramtype confidence: float
        """
        super(ModelsAnalyzeResultsDocumentElementsKeyValuePair, self).__init__(**kwargs)
        self.key = kwargs['key']
        self.value = kwargs.get('value', None)
        self.confidence = kwargs['confidence']


class ModelsAnalyzeResultsDocumentElementsLanguage(msrest.serialization.Model):
    """ModelsAnalyzeResultsDocumentElementsLanguage.

    All required parameters must be populated in order to send to Azure.

    :ivar language_code: Required.
    :vartype language_code: str
    :ivar spans: Required.
    :vartype spans: list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsSpan]
    :ivar confidence: Required.
    :vartype confidence: float
    """

    _validation = {
        'language_code': {'required': True},
        'spans': {'required': True},
        'confidence': {'required': True},
    }

    _attribute_map = {
        'language_code': {'key': 'languageCode', 'type': 'str'},
        'spans': {'key': 'spans', 'type': '[ModelsAnalyzeResultsDocumentElementsSpan]'},
        'confidence': {'key': 'confidence', 'type': 'float'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword language_code: Required.
        :paramtype language_code: str
        :keyword spans: Required.
        :paramtype spans: list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsSpan]
        :keyword confidence: Required.
        :paramtype confidence: float
        """
        super(ModelsAnalyzeResultsDocumentElementsLanguage, self).__init__(**kwargs)
        self.language_code = kwargs['language_code']
        self.spans = kwargs['spans']
        self.confidence = kwargs['confidence']


class ModelsAnalyzeResultsDocumentElementsLine(msrest.serialization.Model):
    """ModelsAnalyzeResultsDocumentElementsLine.

    All required parameters must be populated in order to send to Azure.

    :ivar content: Required.
    :vartype content: str
    :ivar bounding_box:
    :vartype bounding_box: list[float]
    :ivar spans: Required.
    :vartype spans: list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsSpan]
    """

    _validation = {
        'content': {'required': True},
        'spans': {'required': True},
    }

    _attribute_map = {
        'content': {'key': 'content', 'type': 'str'},
        'bounding_box': {'key': 'boundingBox', 'type': '[float]'},
        'spans': {'key': 'spans', 'type': '[ModelsAnalyzeResultsDocumentElementsSpan]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword content: Required.
        :paramtype content: str
        :keyword bounding_box:
        :paramtype bounding_box: list[float]
        :keyword spans: Required.
        :paramtype spans: list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsSpan]
        """
        super(ModelsAnalyzeResultsDocumentElementsLine, self).__init__(**kwargs)
        self.content = kwargs['content']
        self.bounding_box = kwargs.get('bounding_box', None)
        self.spans = kwargs['spans']


class ModelsAnalyzeResultsDocumentElementsObjectField(msrest.serialization.Model):
    """ModelsAnalyzeResultsDocumentElementsObjectField.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar type:  Has constant value: "object".
    :vartype type: str
    :ivar value_object: Required. Dictionary of
     <components·1mheujy·schemas·models-analyzeresults-documentelements-objectfield·properties·valueobject·additionalproperties>.
    :vartype value_object: dict[str, any]
    :ivar content: Required.
    :vartype content: str
    :ivar bounding_regions:
    :vartype bounding_regions:
     list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsBoundingRegion]
    :ivar spans: Required.
    :vartype spans: list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsSpan]
    :ivar confidence: Required.
    :vartype confidence: float
    """

    _validation = {
        'type': {'required': True, 'constant': True},
        'value_object': {'required': True},
        'content': {'required': True},
        'spans': {'required': True},
        'confidence': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'value_object': {'key': 'valueObject', 'type': '{object}'},
        'content': {'key': 'content', 'type': 'str'},
        'bounding_regions': {'key': 'boundingRegions', 'type': '[ModelsAnalyzeResultsDocumentElementsBoundingRegion]'},
        'spans': {'key': 'spans', 'type': '[ModelsAnalyzeResultsDocumentElementsSpan]'},
        'confidence': {'key': 'confidence', 'type': 'float'},
    }

    type = "object"

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value_object: Required. Dictionary of
         <components·1mheujy·schemas·models-analyzeresults-documentelements-objectfield·properties·valueobject·additionalproperties>.
        :paramtype value_object: dict[str, any]
        :keyword content: Required.
        :paramtype content: str
        :keyword bounding_regions:
        :paramtype bounding_regions:
         list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsBoundingRegion]
        :keyword spans: Required.
        :paramtype spans: list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsSpan]
        :keyword confidence: Required.
        :paramtype confidence: float
        """
        super(ModelsAnalyzeResultsDocumentElementsObjectField, self).__init__(**kwargs)
        self.value_object = kwargs['value_object']
        self.content = kwargs['content']
        self.bounding_regions = kwargs.get('bounding_regions', None)
        self.spans = kwargs['spans']
        self.confidence = kwargs['confidence']


class ModelsAnalyzeResultsDocumentElementsPage(msrest.serialization.Model):
    """ModelsAnalyzeResultsDocumentElementsPage.

    All required parameters must be populated in order to send to Azure.

    :ivar page_number: Required.
    :vartype page_number: int
    :ivar angle: Required.
    :vartype angle: float
    :ivar width: Required.
    :vartype width: float
    :ivar height: Required.
    :vartype height: float
    :ivar unit: Required. Possible values include: "pixel", "inch".
    :vartype unit: str or
     ~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsPageUnit
    :ivar spans: Required.
    :vartype spans: list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsSpan]
    :ivar words: Required.
    :vartype words: list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsWord]
    :ivar selection_marks:
    :vartype selection_marks:
     list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsSelectionMark]
    :ivar lines: Required.
    :vartype lines: list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsLine]
    """

    _validation = {
        'page_number': {'required': True},
        'angle': {'required': True},
        'width': {'required': True},
        'height': {'required': True},
        'unit': {'required': True},
        'spans': {'required': True},
        'words': {'required': True},
        'lines': {'required': True},
    }

    _attribute_map = {
        'page_number': {'key': 'pageNumber', 'type': 'int'},
        'angle': {'key': 'angle', 'type': 'float'},
        'width': {'key': 'width', 'type': 'float'},
        'height': {'key': 'height', 'type': 'float'},
        'unit': {'key': 'unit', 'type': 'str'},
        'spans': {'key': 'spans', 'type': '[ModelsAnalyzeResultsDocumentElementsSpan]'},
        'words': {'key': 'words', 'type': '[ModelsAnalyzeResultsDocumentElementsWord]'},
        'selection_marks': {'key': 'selectionMarks', 'type': '[ModelsAnalyzeResultsDocumentElementsSelectionMark]'},
        'lines': {'key': 'lines', 'type': '[ModelsAnalyzeResultsDocumentElementsLine]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword page_number: Required.
        :paramtype page_number: int
        :keyword angle: Required.
        :paramtype angle: float
        :keyword width: Required.
        :paramtype width: float
        :keyword height: Required.
        :paramtype height: float
        :keyword unit: Required. Possible values include: "pixel", "inch".
        :paramtype unit: str or
         ~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsPageUnit
        :keyword spans: Required.
        :paramtype spans: list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsSpan]
        :keyword words: Required.
        :paramtype words: list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsWord]
        :keyword selection_marks:
        :paramtype selection_marks:
         list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsSelectionMark]
        :keyword lines: Required.
        :paramtype lines: list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsLine]
        """
        super(ModelsAnalyzeResultsDocumentElementsPage, self).__init__(**kwargs)
        self.page_number = kwargs['page_number']
        self.angle = kwargs['angle']
        self.width = kwargs['width']
        self.height = kwargs['height']
        self.unit = kwargs['unit']
        self.spans = kwargs['spans']
        self.words = kwargs['words']
        self.selection_marks = kwargs.get('selection_marks', None)
        self.lines = kwargs['lines']


class ModelsAnalyzeResultsDocumentElementsPhoneNumberField(msrest.serialization.Model):
    """ModelsAnalyzeResultsDocumentElementsPhoneNumberField.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar type:  Has constant value: "phoneNumber".
    :vartype type: str
    :ivar value_phone_number:
    :vartype value_phone_number: str
    :ivar content: Required.
    :vartype content: str
    :ivar bounding_regions:
    :vartype bounding_regions:
     list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsBoundingRegion]
    :ivar spans: Required.
    :vartype spans: list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsSpan]
    :ivar confidence: Required.
    :vartype confidence: float
    """

    _validation = {
        'type': {'required': True, 'constant': True},
        'content': {'required': True},
        'spans': {'required': True},
        'confidence': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'value_phone_number': {'key': 'valuePhoneNumber', 'type': 'str'},
        'content': {'key': 'content', 'type': 'str'},
        'bounding_regions': {'key': 'boundingRegions', 'type': '[ModelsAnalyzeResultsDocumentElementsBoundingRegion]'},
        'spans': {'key': 'spans', 'type': '[ModelsAnalyzeResultsDocumentElementsSpan]'},
        'confidence': {'key': 'confidence', 'type': 'float'},
    }

    type = "phoneNumber"

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value_phone_number:
        :paramtype value_phone_number: str
        :keyword content: Required.
        :paramtype content: str
        :keyword bounding_regions:
        :paramtype bounding_regions:
         list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsBoundingRegion]
        :keyword spans: Required.
        :paramtype spans: list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsSpan]
        :keyword confidence: Required.
        :paramtype confidence: float
        """
        super(ModelsAnalyzeResultsDocumentElementsPhoneNumberField, self).__init__(**kwargs)
        self.value_phone_number = kwargs.get('value_phone_number', None)
        self.content = kwargs['content']
        self.bounding_regions = kwargs.get('bounding_regions', None)
        self.spans = kwargs['spans']
        self.confidence = kwargs['confidence']


class ModelsAnalyzeResultsDocumentElementsSelectionMark(msrest.serialization.Model):
    """ModelsAnalyzeResultsDocumentElementsSelectionMark.

    All required parameters must be populated in order to send to Azure.

    :ivar state: Required. Possible values include: "selected", "unselected".
    :vartype state: str or
     ~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsSelectionMarkState
    :ivar span: Required.
    :vartype span: ~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsSpan
    :ivar bounding_box:
    :vartype bounding_box: list[float]
    :ivar confidence: Required.
    :vartype confidence: float
    """

    _validation = {
        'state': {'required': True},
        'span': {'required': True},
        'confidence': {'required': True},
    }

    _attribute_map = {
        'state': {'key': 'state', 'type': 'str'},
        'span': {'key': 'span', 'type': 'ModelsAnalyzeResultsDocumentElementsSpan'},
        'bounding_box': {'key': 'boundingBox', 'type': '[float]'},
        'confidence': {'key': 'confidence', 'type': 'float'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword state: Required. Possible values include: "selected", "unselected".
        :paramtype state: str or
         ~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsSelectionMarkState
        :keyword span: Required.
        :paramtype span: ~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsSpan
        :keyword bounding_box:
        :paramtype bounding_box: list[float]
        :keyword confidence: Required.
        :paramtype confidence: float
        """
        super(ModelsAnalyzeResultsDocumentElementsSelectionMark, self).__init__(**kwargs)
        self.state = kwargs['state']
        self.span = kwargs['span']
        self.bounding_box = kwargs.get('bounding_box', None)
        self.confidence = kwargs['confidence']


class ModelsAnalyzeResultsDocumentElementsSelectionMarkField(msrest.serialization.Model):
    """ModelsAnalyzeResultsDocumentElementsSelectionMarkField.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar type:  Has constant value: "selectionMark".
    :vartype type: str
    :ivar value_selection_mark: Possible values include: "selected", "unselected".
    :vartype value_selection_mark: str or
     ~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsSelectionMarkFieldValueSelectionMark
    :ivar content: Required.
    :vartype content: str
    :ivar bounding_regions:
    :vartype bounding_regions:
     list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsBoundingRegion]
    :ivar spans: Required.
    :vartype spans: list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsSpan]
    :ivar confidence: Required.
    :vartype confidence: float
    """

    _validation = {
        'type': {'required': True, 'constant': True},
        'content': {'required': True},
        'spans': {'required': True},
        'confidence': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'value_selection_mark': {'key': 'valueSelectionMark', 'type': 'str'},
        'content': {'key': 'content', 'type': 'str'},
        'bounding_regions': {'key': 'boundingRegions', 'type': '[ModelsAnalyzeResultsDocumentElementsBoundingRegion]'},
        'spans': {'key': 'spans', 'type': '[ModelsAnalyzeResultsDocumentElementsSpan]'},
        'confidence': {'key': 'confidence', 'type': 'float'},
    }

    type = "selectionMark"

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value_selection_mark: Possible values include: "selected", "unselected".
        :paramtype value_selection_mark: str or
         ~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsSelectionMarkFieldValueSelectionMark
        :keyword content: Required.
        :paramtype content: str
        :keyword bounding_regions:
        :paramtype bounding_regions:
         list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsBoundingRegion]
        :keyword spans: Required.
        :paramtype spans: list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsSpan]
        :keyword confidence: Required.
        :paramtype confidence: float
        """
        super(ModelsAnalyzeResultsDocumentElementsSelectionMarkField, self).__init__(**kwargs)
        self.value_selection_mark = kwargs.get('value_selection_mark', None)
        self.content = kwargs['content']
        self.bounding_regions = kwargs.get('bounding_regions', None)
        self.spans = kwargs['spans']
        self.confidence = kwargs['confidence']


class ModelsAnalyzeResultsDocumentElementsSignatureField(msrest.serialization.Model):
    """ModelsAnalyzeResultsDocumentElementsSignatureField.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar type:  Has constant value: "signature".
    :vartype type: str
    :ivar value_signature: Possible values include: "signed", "unsigned".
    :vartype value_signature: str or
     ~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsSignatureFieldValueSignature
    :ivar content: Required.
    :vartype content: str
    :ivar bounding_regions:
    :vartype bounding_regions:
     list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsBoundingRegion]
    :ivar spans: Required.
    :vartype spans: list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsSpan]
    :ivar confidence: Required.
    :vartype confidence: float
    """

    _validation = {
        'type': {'required': True, 'constant': True},
        'content': {'required': True},
        'spans': {'required': True},
        'confidence': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'value_signature': {'key': 'valueSignature', 'type': 'str'},
        'content': {'key': 'content', 'type': 'str'},
        'bounding_regions': {'key': 'boundingRegions', 'type': '[ModelsAnalyzeResultsDocumentElementsBoundingRegion]'},
        'spans': {'key': 'spans', 'type': '[ModelsAnalyzeResultsDocumentElementsSpan]'},
        'confidence': {'key': 'confidence', 'type': 'float'},
    }

    type = "signature"

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value_signature: Possible values include: "signed", "unsigned".
        :paramtype value_signature: str or
         ~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsSignatureFieldValueSignature
        :keyword content: Required.
        :paramtype content: str
        :keyword bounding_regions:
        :paramtype bounding_regions:
         list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsBoundingRegion]
        :keyword spans: Required.
        :paramtype spans: list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsSpan]
        :keyword confidence: Required.
        :paramtype confidence: float
        """
        super(ModelsAnalyzeResultsDocumentElementsSignatureField, self).__init__(**kwargs)
        self.value_signature = kwargs.get('value_signature', None)
        self.content = kwargs['content']
        self.bounding_regions = kwargs.get('bounding_regions', None)
        self.spans = kwargs['spans']
        self.confidence = kwargs['confidence']


class ModelsAnalyzeResultsDocumentElementsSpan(msrest.serialization.Model):
    """ModelsAnalyzeResultsDocumentElementsSpan.

    All required parameters must be populated in order to send to Azure.

    :ivar offset: Required.
    :vartype offset: int
    :ivar length: Required.
    :vartype length: int
    """

    _validation = {
        'offset': {'required': True},
        'length': {'required': True},
    }

    _attribute_map = {
        'offset': {'key': 'offset', 'type': 'int'},
        'length': {'key': 'length', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword offset: Required.
        :paramtype offset: int
        :keyword length: Required.
        :paramtype length: int
        """
        super(ModelsAnalyzeResultsDocumentElementsSpan, self).__init__(**kwargs)
        self.offset = kwargs['offset']
        self.length = kwargs['length']


class ModelsAnalyzeResultsDocumentElementsStringField(msrest.serialization.Model):
    """ModelsAnalyzeResultsDocumentElementsStringField.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar type:  Has constant value: "string".
    :vartype type: str
    :ivar value_string:
    :vartype value_string: str
    :ivar content: Required.
    :vartype content: str
    :ivar bounding_regions:
    :vartype bounding_regions:
     list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsBoundingRegion]
    :ivar spans: Required.
    :vartype spans: list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsSpan]
    :ivar confidence: Required.
    :vartype confidence: float
    """

    _validation = {
        'type': {'required': True, 'constant': True},
        'content': {'required': True},
        'spans': {'required': True},
        'confidence': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'value_string': {'key': 'valueString', 'type': 'str'},
        'content': {'key': 'content', 'type': 'str'},
        'bounding_regions': {'key': 'boundingRegions', 'type': '[ModelsAnalyzeResultsDocumentElementsBoundingRegion]'},
        'spans': {'key': 'spans', 'type': '[ModelsAnalyzeResultsDocumentElementsSpan]'},
        'confidence': {'key': 'confidence', 'type': 'float'},
    }

    type = "string"

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value_string:
        :paramtype value_string: str
        :keyword content: Required.
        :paramtype content: str
        :keyword bounding_regions:
        :paramtype bounding_regions:
         list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsBoundingRegion]
        :keyword spans: Required.
        :paramtype spans: list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsSpan]
        :keyword confidence: Required.
        :paramtype confidence: float
        """
        super(ModelsAnalyzeResultsDocumentElementsStringField, self).__init__(**kwargs)
        self.value_string = kwargs.get('value_string', None)
        self.content = kwargs['content']
        self.bounding_regions = kwargs.get('bounding_regions', None)
        self.spans = kwargs['spans']
        self.confidence = kwargs['confidence']


class ModelsAnalyzeResultsDocumentElementsStyle(msrest.serialization.Model):
    """ModelsAnalyzeResultsDocumentElementsStyle.

    All required parameters must be populated in order to send to Azure.

    :ivar is_handwritten:
    :vartype is_handwritten: bool
    :ivar spans: Required.
    :vartype spans: list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsSpan]
    :ivar confidence: Required.
    :vartype confidence: float
    """

    _validation = {
        'spans': {'required': True},
        'confidence': {'required': True},
    }

    _attribute_map = {
        'is_handwritten': {'key': 'isHandwritten', 'type': 'bool'},
        'spans': {'key': 'spans', 'type': '[ModelsAnalyzeResultsDocumentElementsSpan]'},
        'confidence': {'key': 'confidence', 'type': 'float'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword is_handwritten:
        :paramtype is_handwritten: bool
        :keyword spans: Required.
        :paramtype spans: list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsSpan]
        :keyword confidence: Required.
        :paramtype confidence: float
        """
        super(ModelsAnalyzeResultsDocumentElementsStyle, self).__init__(**kwargs)
        self.is_handwritten = kwargs.get('is_handwritten', None)
        self.spans = kwargs['spans']
        self.confidence = kwargs['confidence']


class ModelsAnalyzeResultsDocumentElementsTable(msrest.serialization.Model):
    """ModelsAnalyzeResultsDocumentElementsTable.

    All required parameters must be populated in order to send to Azure.

    :ivar row_count: Required.
    :vartype row_count: int
    :ivar column_count: Required.
    :vartype column_count: int
    :ivar cells: Required.
    :vartype cells:
     list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsTableCell]
    :ivar bounding_regions:
    :vartype bounding_regions:
     list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsBoundingRegion]
    :ivar spans: Required.
    :vartype spans: list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsSpan]
    """

    _validation = {
        'row_count': {'required': True},
        'column_count': {'required': True},
        'cells': {'required': True},
        'spans': {'required': True},
    }

    _attribute_map = {
        'row_count': {'key': 'rowCount', 'type': 'int'},
        'column_count': {'key': 'columnCount', 'type': 'int'},
        'cells': {'key': 'cells', 'type': '[ModelsAnalyzeResultsDocumentElementsTableCell]'},
        'bounding_regions': {'key': 'boundingRegions', 'type': '[ModelsAnalyzeResultsDocumentElementsBoundingRegion]'},
        'spans': {'key': 'spans', 'type': '[ModelsAnalyzeResultsDocumentElementsSpan]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword row_count: Required.
        :paramtype row_count: int
        :keyword column_count: Required.
        :paramtype column_count: int
        :keyword cells: Required.
        :paramtype cells:
         list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsTableCell]
        :keyword bounding_regions:
        :paramtype bounding_regions:
         list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsBoundingRegion]
        :keyword spans: Required.
        :paramtype spans: list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsSpan]
        """
        super(ModelsAnalyzeResultsDocumentElementsTable, self).__init__(**kwargs)
        self.row_count = kwargs['row_count']
        self.column_count = kwargs['column_count']
        self.cells = kwargs['cells']
        self.bounding_regions = kwargs.get('bounding_regions', None)
        self.spans = kwargs['spans']


class ModelsAnalyzeResultsDocumentElementsTableCell(msrest.serialization.Model):
    """ModelsAnalyzeResultsDocumentElementsTableCell.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Possible values include: "content", "rowHeader", "columnHeader", "stubHead",
     "description".
    :vartype kind: str or
     ~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsTableCellKind
    :ivar row_index: Required.
    :vartype row_index: int
    :ivar column_index: Required.
    :vartype column_index: int
    :ivar row_span:
    :vartype row_span: int
    :ivar column_span:
    :vartype column_span: int
    :ivar content: Required.
    :vartype content: str
    :ivar bounding_regions:
    :vartype bounding_regions:
     list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsBoundingRegion]
    :ivar spans: Required.
    :vartype spans: list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsSpan]
    """

    _validation = {
        'row_index': {'required': True},
        'column_index': {'required': True},
        'content': {'required': True},
        'spans': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'row_index': {'key': 'rowIndex', 'type': 'int'},
        'column_index': {'key': 'columnIndex', 'type': 'int'},
        'row_span': {'key': 'rowSpan', 'type': 'int'},
        'column_span': {'key': 'columnSpan', 'type': 'int'},
        'content': {'key': 'content', 'type': 'str'},
        'bounding_regions': {'key': 'boundingRegions', 'type': '[ModelsAnalyzeResultsDocumentElementsBoundingRegion]'},
        'spans': {'key': 'spans', 'type': '[ModelsAnalyzeResultsDocumentElementsSpan]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword kind: Possible values include: "content", "rowHeader", "columnHeader", "stubHead",
         "description".
        :paramtype kind: str or
         ~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsTableCellKind
        :keyword row_index: Required.
        :paramtype row_index: int
        :keyword column_index: Required.
        :paramtype column_index: int
        :keyword row_span:
        :paramtype row_span: int
        :keyword column_span:
        :paramtype column_span: int
        :keyword content: Required.
        :paramtype content: str
        :keyword bounding_regions:
        :paramtype bounding_regions:
         list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsBoundingRegion]
        :keyword spans: Required.
        :paramtype spans: list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsSpan]
        """
        super(ModelsAnalyzeResultsDocumentElementsTableCell, self).__init__(**kwargs)
        self.kind = kwargs.get('kind', None)
        self.row_index = kwargs['row_index']
        self.column_index = kwargs['column_index']
        self.row_span = kwargs.get('row_span', None)
        self.column_span = kwargs.get('column_span', None)
        self.content = kwargs['content']
        self.bounding_regions = kwargs.get('bounding_regions', None)
        self.spans = kwargs['spans']


class ModelsAnalyzeResultsDocumentElementsTimeField(msrest.serialization.Model):
    """ModelsAnalyzeResultsDocumentElementsTimeField.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar type:  Has constant value: "time".
    :vartype type: str
    :ivar value_time:
    :vartype value_time: ~datetime.time
    :ivar content: Required.
    :vartype content: str
    :ivar bounding_regions:
    :vartype bounding_regions:
     list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsBoundingRegion]
    :ivar spans: Required.
    :vartype spans: list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsSpan]
    :ivar confidence: Required.
    :vartype confidence: float
    """

    _validation = {
        'type': {'required': True, 'constant': True},
        'content': {'required': True},
        'spans': {'required': True},
        'confidence': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'value_time': {'key': 'valueTime', 'type': 'time'},
        'content': {'key': 'content', 'type': 'str'},
        'bounding_regions': {'key': 'boundingRegions', 'type': '[ModelsAnalyzeResultsDocumentElementsBoundingRegion]'},
        'spans': {'key': 'spans', 'type': '[ModelsAnalyzeResultsDocumentElementsSpan]'},
        'confidence': {'key': 'confidence', 'type': 'float'},
    }

    type = "time"

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value_time:
        :paramtype value_time: ~datetime.time
        :keyword content: Required.
        :paramtype content: str
        :keyword bounding_regions:
        :paramtype bounding_regions:
         list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsBoundingRegion]
        :keyword spans: Required.
        :paramtype spans: list[~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsSpan]
        :keyword confidence: Required.
        :paramtype confidence: float
        """
        super(ModelsAnalyzeResultsDocumentElementsTimeField, self).__init__(**kwargs)
        self.value_time = kwargs.get('value_time', None)
        self.content = kwargs['content']
        self.bounding_regions = kwargs.get('bounding_regions', None)
        self.spans = kwargs['spans']
        self.confidence = kwargs['confidence']


class ModelsAnalyzeResultsDocumentElementsWord(msrest.serialization.Model):
    """ModelsAnalyzeResultsDocumentElementsWord.

    All required parameters must be populated in order to send to Azure.

    :ivar content: Required.
    :vartype content: str
    :ivar span: Required.
    :vartype span: ~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsSpan
    :ivar bounding_box:
    :vartype bounding_box: list[float]
    :ivar confidence: Required.
    :vartype confidence: float
    """

    _validation = {
        'content': {'required': True},
        'span': {'required': True},
        'confidence': {'required': True},
    }

    _attribute_map = {
        'content': {'key': 'content', 'type': 'str'},
        'span': {'key': 'span', 'type': 'ModelsAnalyzeResultsDocumentElementsSpan'},
        'bounding_box': {'key': 'boundingBox', 'type': '[float]'},
        'confidence': {'key': 'confidence', 'type': 'float'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword content: Required.
        :paramtype content: str
        :keyword span: Required.
        :paramtype span: ~form_recognizer_client.models.ModelsAnalyzeResultsDocumentElementsSpan
        :keyword bounding_box:
        :paramtype bounding_box: list[float]
        :keyword confidence: Required.
        :paramtype confidence: float
        """
        super(ModelsAnalyzeResultsDocumentElementsWord, self).__init__(**kwargs)
        self.content = kwargs['content']
        self.span = kwargs['span']
        self.bounding_box = kwargs.get('bounding_box', None)
        self.confidence = kwargs['confidence']


class ModelsDocTypeInfo(msrest.serialization.Model):
    """ModelsDocTypeInfo.

    All required parameters must be populated in order to send to Azure.

    :ivar description:
    :vartype description: str
    :ivar build_mode: Possible values include: "template", "neural".
    :vartype build_mode: str or ~form_recognizer_client.models.ModelsBuildMode
    :ivar field_schema: Required. Dictionary of <Models.DocumentFieldSchema>.
    :vartype field_schema: dict[str, ~form_recognizer_client.models.ModelsDocumentFieldSchema]
    :ivar field_confidence: Required. Any object.
    :vartype field_confidence: any
    """

    _validation = {
        'field_schema': {'required': True},
        'field_confidence': {'required': True},
    }

    _attribute_map = {
        'description': {'key': 'description', 'type': 'str'},
        'build_mode': {'key': 'buildMode', 'type': 'str'},
        'field_schema': {'key': 'fieldSchema', 'type': '{ModelsDocumentFieldSchema}'},
        'field_confidence': {'key': 'fieldConfidence', 'type': 'object'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword description:
        :paramtype description: str
        :keyword build_mode: Possible values include: "template", "neural".
        :paramtype build_mode: str or ~form_recognizer_client.models.ModelsBuildMode
        :keyword field_schema: Required. Dictionary of <Models.DocumentFieldSchema>.
        :paramtype field_schema: dict[str, ~form_recognizer_client.models.ModelsDocumentFieldSchema]
        :keyword field_confidence: Required. Any object.
        :paramtype field_confidence: any
        """
        super(ModelsDocTypeInfo, self).__init__(**kwargs)
        self.description = kwargs.get('description', None)
        self.build_mode = kwargs.get('build_mode', None)
        self.field_schema = kwargs['field_schema']
        self.field_confidence = kwargs['field_confidence']


class ModelsDocumentFieldSchema(msrest.serialization.Model):
    """ModelsDocumentFieldSchema.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Required. Possible values include: "string", "date", "time", "phoneNumber",
     "number", "integer", "selectionMark", "countryRegion", "signature", "array", "object",
     "currency".
    :vartype type: str or ~form_recognizer_client.models.ModelsDocumentFieldType
    :ivar description:
    :vartype description: str
    :ivar example:
    :vartype example: str
    :ivar items:
    :vartype items: ~form_recognizer_client.models.ModelsDocumentFieldSchema
    :ivar properties: Dictionary of <Models.DocumentFieldSchema>.
    :vartype properties: dict[str, ~form_recognizer_client.models.ModelsDocumentFieldSchema]
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'example': {'key': 'example', 'type': 'str'},
        'items': {'key': 'items', 'type': 'ModelsDocumentFieldSchema'},
        'properties': {'key': 'properties', 'type': '{ModelsDocumentFieldSchema}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword type: Required. Possible values include: "string", "date", "time", "phoneNumber",
         "number", "integer", "selectionMark", "countryRegion", "signature", "array", "object",
         "currency".
        :paramtype type: str or ~form_recognizer_client.models.ModelsDocumentFieldType
        :keyword description:
        :paramtype description: str
        :keyword example:
        :paramtype example: str
        :keyword items:
        :paramtype items: ~form_recognizer_client.models.ModelsDocumentFieldSchema
        :keyword properties: Dictionary of <Models.DocumentFieldSchema>.
        :paramtype properties: dict[str, ~form_recognizer_client.models.ModelsDocumentFieldSchema]
        """
        super(ModelsDocumentFieldSchema, self).__init__(**kwargs)
        self.type = kwargs['type']
        self.description = kwargs.get('description', None)
        self.example = kwargs.get('example', None)
        self.items = kwargs.get('items', None)
        self.properties = kwargs.get('properties', None)


class ModelsModelSummary(msrest.serialization.Model):
    """ModelsModelSummary.

    All required parameters must be populated in order to send to Azure.

    :ivar model_id: Required.
    :vartype model_id: str
    :ivar created_date_time: Required.
    :vartype created_date_time: ~datetime.datetime
    :ivar api_version:
    :vartype api_version: str
    :ivar tags: A set of tags. Dictionary of :code:`<string>`.
    :vartype tags: dict[str, str]
    """

    _validation = {
        'model_id': {'required': True},
        'created_date_time': {'required': True},
    }

    _attribute_map = {
        'model_id': {'key': 'modelId', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'api_version': {'key': 'apiVersion', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword model_id: Required.
        :paramtype model_id: str
        :keyword created_date_time: Required.
        :paramtype created_date_time: ~datetime.datetime
        :keyword api_version:
        :paramtype api_version: str
        :keyword tags: A set of tags. Dictionary of :code:`<string>`.
        :paramtype tags: dict[str, str]
        """
        super(ModelsModelSummary, self).__init__(**kwargs)
        self.model_id = kwargs['model_id']
        self.created_date_time = kwargs['created_date_time']
        self.api_version = kwargs.get('api_version', None)
        self.tags = kwargs.get('tags', None)


class ModelsModelInfo(ModelsModelSummary):
    """ModelsModelInfo.

    All required parameters must be populated in order to send to Azure.

    :ivar model_id: Required.
    :vartype model_id: str
    :ivar created_date_time: Required.
    :vartype created_date_time: ~datetime.datetime
    :ivar api_version:
    :vartype api_version: str
    :ivar tags: A set of tags. Dictionary of :code:`<string>`.
    :vartype tags: dict[str, str]
    :ivar doc_types: Dictionary of <Models.DocTypeInfo>.
    :vartype doc_types: dict[str, ~form_recognizer_client.models.ModelsDocTypeInfo]
    """

    _validation = {
        'model_id': {'required': True},
        'created_date_time': {'required': True},
    }

    _attribute_map = {
        'model_id': {'key': 'modelId', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'api_version': {'key': 'apiVersion', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'doc_types': {'key': 'docTypes', 'type': '{ModelsDocTypeInfo}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword model_id: Required.
        :paramtype model_id: str
        :keyword created_date_time: Required.
        :paramtype created_date_time: ~datetime.datetime
        :keyword api_version:
        :paramtype api_version: str
        :keyword tags: A set of tags. Dictionary of :code:`<string>`.
        :paramtype tags: dict[str, str]
        :keyword doc_types: Dictionary of <Models.DocTypeInfo>.
        :paramtype doc_types: dict[str, ~form_recognizer_client.models.ModelsDocTypeInfo]
        """
        super(ModelsModelInfo, self).__init__(**kwargs)
        self.doc_types = kwargs.get('doc_types', None)


class OperationsOperationInfo(msrest.serialization.Model):
    """OperationsOperationInfo.

    All required parameters must be populated in order to send to Azure.

    :ivar operation_id: Required.
    :vartype operation_id: str
    :ivar status: Required. Possible values include: "notStarted", "running", "failed",
     "succeeded", "canceled".
    :vartype status: str or ~form_recognizer_client.models.OperationsOperationStatus
    :ivar percent_completed:
    :vartype percent_completed: int
    :ivar created_date_time: Required.
    :vartype created_date_time: ~datetime.datetime
    :ivar last_updated_date_time: Required.
    :vartype last_updated_date_time: ~datetime.datetime
    :ivar kind: Required. Possible values include: "documentModelBuild", "documentModelCompose",
     "documentModelCopyTo".
    :vartype kind: str or ~form_recognizer_client.models.OperationsOperationKind
    :ivar resource_location: Required.
    :vartype resource_location: str
    :ivar api_version:
    :vartype api_version: str
    :ivar tags: A set of tags. Dictionary of :code:`<string>`.
    :vartype tags: dict[str, str]
    """

    _validation = {
        'operation_id': {'required': True},
        'status': {'required': True},
        'created_date_time': {'required': True},
        'last_updated_date_time': {'required': True},
        'kind': {'required': True},
        'resource_location': {'required': True},
    }

    _attribute_map = {
        'operation_id': {'key': 'operationId', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'percent_completed': {'key': 'percentCompleted', 'type': 'int'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_updated_date_time': {'key': 'lastUpdatedDateTime', 'type': 'iso-8601'},
        'kind': {'key': 'kind', 'type': 'str'},
        'resource_location': {'key': 'resourceLocation', 'type': 'str'},
        'api_version': {'key': 'apiVersion', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword operation_id: Required.
        :paramtype operation_id: str
        :keyword status: Required. Possible values include: "notStarted", "running", "failed",
         "succeeded", "canceled".
        :paramtype status: str or ~form_recognizer_client.models.OperationsOperationStatus
        :keyword percent_completed:
        :paramtype percent_completed: int
        :keyword created_date_time: Required.
        :paramtype created_date_time: ~datetime.datetime
        :keyword last_updated_date_time: Required.
        :paramtype last_updated_date_time: ~datetime.datetime
        :keyword kind: Required. Possible values include: "documentModelBuild", "documentModelCompose",
         "documentModelCopyTo".
        :paramtype kind: str or ~form_recognizer_client.models.OperationsOperationKind
        :keyword resource_location: Required.
        :paramtype resource_location: str
        :keyword api_version:
        :paramtype api_version: str
        :keyword tags: A set of tags. Dictionary of :code:`<string>`.
        :paramtype tags: dict[str, str]
        """
        super(OperationsOperationInfo, self).__init__(**kwargs)
        self.operation_id = kwargs['operation_id']
        self.status = kwargs['status']
        self.percent_completed = kwargs.get('percent_completed', None)
        self.created_date_time = kwargs['created_date_time']
        self.last_updated_date_time = kwargs['last_updated_date_time']
        self.kind = kwargs['kind']
        self.resource_location = kwargs['resource_location']
        self.api_version = kwargs.get('api_version', None)
        self.tags = kwargs.get('tags', None)


class OperationsGetOperationResponse(OperationsOperationInfo):
    """OperationsGetOperationResponse.

    All required parameters must be populated in order to send to Azure.

    :ivar operation_id: Required.
    :vartype operation_id: str
    :ivar status: Required. Possible values include: "notStarted", "running", "failed",
     "succeeded", "canceled".
    :vartype status: str or ~form_recognizer_client.models.OperationsOperationStatus
    :ivar percent_completed:
    :vartype percent_completed: int
    :ivar created_date_time: Required.
    :vartype created_date_time: ~datetime.datetime
    :ivar last_updated_date_time: Required.
    :vartype last_updated_date_time: ~datetime.datetime
    :ivar kind: Required. Possible values include: "documentModelBuild", "documentModelCompose",
     "documentModelCopyTo".
    :vartype kind: str or ~form_recognizer_client.models.OperationsOperationKind
    :ivar resource_location: Required.
    :vartype resource_location: str
    :ivar api_version:
    :vartype api_version: str
    :ivar tags: A set of tags. Dictionary of :code:`<string>`.
    :vartype tags: dict[str, str]
    :ivar error:
    :vartype error: ~form_recognizer_client.models.Error
    :ivar result:
    :vartype result: ~form_recognizer_client.models.ModelsModelInfo
    """

    _validation = {
        'operation_id': {'required': True},
        'status': {'required': True},
        'created_date_time': {'required': True},
        'last_updated_date_time': {'required': True},
        'kind': {'required': True},
        'resource_location': {'required': True},
    }

    _attribute_map = {
        'operation_id': {'key': 'operationId', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'percent_completed': {'key': 'percentCompleted', 'type': 'int'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_updated_date_time': {'key': 'lastUpdatedDateTime', 'type': 'iso-8601'},
        'kind': {'key': 'kind', 'type': 'str'},
        'resource_location': {'key': 'resourceLocation', 'type': 'str'},
        'api_version': {'key': 'apiVersion', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'error': {'key': 'error', 'type': 'Error'},
        'result': {'key': 'result', 'type': 'ModelsModelInfo'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword operation_id: Required.
        :paramtype operation_id: str
        :keyword status: Required. Possible values include: "notStarted", "running", "failed",
         "succeeded", "canceled".
        :paramtype status: str or ~form_recognizer_client.models.OperationsOperationStatus
        :keyword percent_completed:
        :paramtype percent_completed: int
        :keyword created_date_time: Required.
        :paramtype created_date_time: ~datetime.datetime
        :keyword last_updated_date_time: Required.
        :paramtype last_updated_date_time: ~datetime.datetime
        :keyword kind: Required. Possible values include: "documentModelBuild", "documentModelCompose",
         "documentModelCopyTo".
        :paramtype kind: str or ~form_recognizer_client.models.OperationsOperationKind
        :keyword resource_location: Required.
        :paramtype resource_location: str
        :keyword api_version:
        :paramtype api_version: str
        :keyword tags: A set of tags. Dictionary of :code:`<string>`.
        :paramtype tags: dict[str, str]
        :keyword error:
        :paramtype error: ~form_recognizer_client.models.Error
        :keyword result:
        :paramtype result: ~form_recognizer_client.models.ModelsModelInfo
        """
        super(OperationsGetOperationResponse, self).__init__(**kwargs)
        self.error = kwargs.get('error', None)
        self.result = kwargs.get('result', None)


class PageModelsModelSummary(msrest.serialization.Model):
    """PageModelsModelSummary.

    All required parameters must be populated in order to send to Azure.

    :ivar value: Required.
    :vartype value: list[~form_recognizer_client.models.ModelsModelSummary]
    :ivar next_link:
    :vartype next_link: str
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ModelsModelSummary]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: Required.
        :paramtype value: list[~form_recognizer_client.models.ModelsModelSummary]
        :keyword next_link:
        :paramtype next_link: str
        """
        super(PageModelsModelSummary, self).__init__(**kwargs)
        self.value = kwargs['value']
        self.next_link = kwargs.get('next_link', None)


class PageOperationsOperationInfo(msrest.serialization.Model):
    """PageOperationsOperationInfo.

    All required parameters must be populated in order to send to Azure.

    :ivar value: Required.
    :vartype value: list[~form_recognizer_client.models.OperationsOperationInfo]
    :ivar next_link:
    :vartype next_link: str
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[OperationsOperationInfo]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: Required.
        :paramtype value: list[~form_recognizer_client.models.OperationsOperationInfo]
        :keyword next_link:
        :paramtype next_link: str
        """
        super(PageOperationsOperationInfo, self).__init__(**kwargs)
        self.value = kwargs['value']
        self.next_link = kwargs.get('next_link', None)


class ResourceInfo(msrest.serialization.Model):
    """ResourceInfo.

    All required parameters must be populated in order to send to Azure.

    :ivar custom_document_models: Required.
    :vartype custom_document_models: ~form_recognizer_client.models.CustomDocumentModelInfo
    """

    _validation = {
        'custom_document_models': {'required': True},
    }

    _attribute_map = {
        'custom_document_models': {'key': 'customDocumentModels', 'type': 'CustomDocumentModelInfo'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword custom_document_models: Required.
        :paramtype custom_document_models: ~form_recognizer_client.models.CustomDocumentModelInfo
        """
        super(ResourceInfo, self).__init__(**kwargs)
        self.custom_document_models = kwargs['custom_document_models']
